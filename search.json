[{"path":"https://mrc-ide.github.io/odin2/articles/debugging.html","id":"using-print","dir":"Articles","previous_headings":"","what":"Using print()","title":"Debugging","text":"odin 1.4.5, can print value variables middle running model. expand change functionality future versions, feedback welcome. Consider simple model , illustrates idea: ’ve told odin want watch variable x print value every evaluation (third line model code. run model prints time square brackets debug information following. Notice requested solution times 0 0.1 debug information shows every point time ODE solver evaluated system equations. function shares name R’s print() entirely different functionality.","code":"gen <- odin2::odin({   update(x) <- Normal(x, 1)   initial(x) <- 1   print(\"x: {x}\") }) sys <- dust_system_create(gen(), list(), 1) dust_system_run_to_time(sys, 10) #> [0.000000] x: 0.000000 #> [1.000000] x: -0.514960 #> [2.000000] x: -1.023495 #> [3.000000] x: -1.239498 #> [4.000000] x: -0.470707 #> [5.000000] x: 0.898433 #> [6.000000] x: 0.797199 #> [7.000000] x: -0.569418 #> [8.000000] x: -0.342841 #> [9.000000] x: -1.825629"},{"path":"https://mrc-ide.github.io/odin2/articles/debugging.html","id":"print-format-strings","dir":"Articles","previous_headings":"Using print()","what":"print format strings","title":"Debugging","text":"print formatting, use glue drive formatting, used package format feel familiar. simple usage ; can refer variables within {curly braces}; long variable scalar work. Outside curly braces string printed verbatim.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/debugging.html","id":"conditional-display","dir":"Articles","previous_headings":"Using print() > print format strings","what":"Conditional display","title":"Debugging","text":"model takes many steps, want narrow problem, may want enable conditional display debug information. Use argument = control display, display value x greater 1. can chain together expressions parentheses && || reference value system. example:","code":"print(\"x: {x}\", when = x > 1) printf(\"{x} {y} {z}\", when = x > (x + y + z) / 2 && a < 1)"},{"path":"https://mrc-ide.github.io/odin2/articles/debugging.html","id":"controlling-precision","dir":"Articles","previous_headings":"Using print() > print format strings","what":"Controlling precision","title":"Debugging","text":"can control way quantities displayed use formatting options. formatting used R, can experiment console easily. default print generic floating point number, : roughly equivalent writing See ?sprintf information; defaults 6 decimal places precision. may appropriate dealing numbers large small; look bit silly: first loses information - non-zero parts number fall precision cut-, second 6 decimal places just add noise. might prefer: write odin’s approach Anything ; interpreted format specifier. also format y 2 decimal places. follow example sprintf transformer example glue including % placeholder, allow formats underlying library supports.","code":"print(\"x: {x}, y: {y}\") sprintf(\"x: %f, y: %f\", x, y) sprintf(\"x: %f, y: %f\", 1e-7, 1e7) #> [1] \"x: 0.000000, y: 10000000.000000\" sprintf(\"x: %g, y: %g\", 1e-7, 1e7) #> [1] \"x: 1e-07, y: 1e+07\" print(\"x: {x; g}, y: {y; g}\") print(\"x: {x; g}, y: {y; .2f}\")"},{"path":"https://mrc-ide.github.io/odin2/articles/debugging.html","id":"current-limitations","dir":"Articles","previous_headings":"Using print()","what":"Current limitations","title":"Debugging","text":"experimental interface, exposed much real-world use. possible might write fairly innocent looking code produce compiler error rather nicer R error - please let us know can fix . ’s good way printing contents array aside indexing . ’s possibly reasonable thing though, given arrays get large quickly. can’t yet control way time formatted (e.g., disabling changing precision) print statement runs right-hand-side function (ODE models) update function (discrete time models) ’s possible variables refer print statements won’t exist function (e.g., transient quantities used compute initial condition). hope rare real-use examples welcome minimal examples show causes problems (likely see compiler error) print result end rhs/update function; crash (writing end memory) might want (e.g., variables see ones iteration prior crash, overwritten junk). may support printing eagerly, dependencies expression satisfied, additional option print careful using integer printing (e.g., {x; d}) variables merely integer-like, get unexpected junk output . can however write {.integer(x); d} conversion integer print ","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/debugging.html","id":"show-the-generated-code","dir":"Articles","previous_headings":"","what":"Show the generated code","title":"Debugging","text":"Sometimes just looking generated code can helpful. can odin_show: show just particular method (usually update rhs), use argument, example:","code":"odin_show({   initial(x) <- 0   update(x) <- Normal(x, 1) }) #>  #> ── odin code: ────────────────────────────────────────────────────────────────── #> #include <dust2/common.hpp> #> // [[dust2::class(odin_system)]] #> // [[dust2::time_type(discrete)]] #> class odin_system { #> public: #>   odin_system() = delete; #>   using real_type = double; #>   using rng_state_type = monty::random::generator<real_type>; #>   struct shared_state { #>     struct odin_internals_type { #>       struct { #>         dust2::packing state; #>       } packing; #>       struct { #>         std::array<size_t, 1> state; #>       } offset; #>     } odin; #>   }; #>   struct internal_state {}; #>   using data_type = dust2::no_data; #>   static dust2::packing packing_state(const shared_state& shared) { #>     return shared.odin.packing.state; #>   } #>   static shared_state build_shared(cpp11::list parameters) { #>     shared_state::odin_internals_type odin; #>     odin.packing.state = dust2::packing{ #>       {\"x\", {}} #>     }; #>     odin.packing.state.copy_offset(odin.offset.state.begin()); #>     return shared_state{odin}; #>   } #>   static internal_state build_internal(const shared_state& shared) { #>     return internal_state{}; #>   } #>   static void update_shared(cpp11::list parameters, shared_state& shared) { #>   } #>   static void update_internal(const shared_state& shared, internal_state& internal) { #>   } #>   static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) { #>     state[0] = 0; #>   } #>   static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) { #>     const auto x = state[0]; #>     state_next[0] = monty::random::normal<real_type>(rng_state, x, 1); #>   } #> }; odin_show({   initial(x) <- 0   update(x) <- Normal(x, 1) }, what = \"update\") #>  #> ── odin code (update): ───────────────────────────────────────────────────────── #> static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) { #>   const auto x = state[0]; #>   state_next[0] = monty::random::normal<real_type>(rng_state, x, 1); #> }"},{"path":"https://mrc-ide.github.io/odin2/articles/debugging.html","id":"use-the-interactive-debugger","dir":"Articles","previous_headings":"","what":"Use the interactive debugger","title":"Debugging","text":"new experimental, can ask odin drop debugger (implemented top R’s browser() explore values variables point within model run. , add call browser() somewhere within odin code recompile. browser function odin accepts arguments phase: system phase debugger inserted; typically update deriv : optionally condition satisfied debugger triggered. typically want set called every step Note R’s browser()! example, debug simple SIR model vignette(\"odin\") might write: location call browser() matter; activated end phase. condition might something cook look happens number individuals infected class starts tailing end simulation. create initialise system normal: However, run system pause part way evaluation: prompt changed Browse[1]> (unfortunately can’t change easily) , can see things odin dust know : can inspect values perform calculations: press c n, odin system proceed next step drop back debugger. can exit Q return console error. can also run press c continue end simulation. Changes make variables within debugger (currently) reflected back model. ’d happy discuss sort workflow seems useful.","code":"gen <- odin({   p_IR <- 1 - exp(-gamma * dt)   N <- parameter(1000)   p_SI <- 1 - exp(-(beta * I / N * dt))   n_SI <- Binomial(S, p_SI)   n_IR <- Binomial(I, p_IR)   update(S) <- S - n_SI   update(I) <- I + n_SI - n_IR   update(R) <- R + n_IR   initial(S) <- N - I0   initial(I) <- I0   initial(R) <- 0   beta <- parameter(0.2)   gamma <- parameter(0.1)   I0 <- parameter(10)    browser(phase = \"update\", when = I < 10 && time > 20) }) sys <- dust_system_create(gen(), list()) dust_system_set_state_initial(sys) dust_system_run_to_time(sys, 200) #> ℹ dust browser ('update'; time = 117): see `?dust_browser()` for help #> Called from: eval(substitute(expr), data, enclos = parent.frame()) Browse[1]> ls()  [1] \"beta\"  \"gamma\" \"I\"     \"I0\"    \"N\"     \"n_IR\"  \"n_SI\"  \"p_IR\"  \"p_SI\" [10] \"R\"     \"S\"     \"time\" Browse[1]> N [1] 1000 Browse[1]> I [1] 9 Browse[1]> S [1] 178 Browse[1]> I / S [1] 0.0505618 dust_browser_continue()"},{"path":"https://mrc-ide.github.io/odin2/articles/details.html","id":"order-of-events","dir":"Articles","previous_headings":"","what":"Order of events","title":"Details","text":"issue discrete-time models, continuous time model always “now”. Consider discrete time model compares data. series “updates” comparison data, repeat reach end data. order events move time = t0 time = t0 + dt : Update Reset variables use zero_every Read variables Look interpolation (using t0) Evaluate assignments (therefore time = t0 variables value beginning step) Write new values state Update time t0 + dt Compare Read variables Look interpolation (using t0 + dt) Compare data","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/details.html","id":"options","dir":"Articles","previous_headings":"","what":"Options","title":"Details","text":"can control default behaviour odin functions setting options. options prefixed odin2. (change odin. start actively replacing old version). set option session, can use want make permanent, can add line ~/.Rprofile file. easiest way edit file run usethis::edit_r_profile() find correct file open editor (e.g., RStudio, using ).","code":"options(odin2.whatever = TRUE)"},{"path":"https://mrc-ide.github.io/odin2/articles/details.html","id":"odin2-compatibility","dir":"Articles","previous_headings":"Options","what":"odin2.compatibility","title":"Details","text":"default behaviour odin1 odin2 compatibility checks. set, string suitable pass compatibility argument odin2::odin (one warning, error silent); see help odin2::odin description possible options.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/details.html","id":"odin2-check_bounds","dir":"Articles","previous_headings":"Options","what":"odin2.check_bounds","title":"Details","text":"default behaviour odin2 array bounds checks. set, string suitable pass check_bounds argument odin2::odin (one error, warning disable); see help odin2::odin description possible options.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e0001","dir":"Articles","previous_headings":"","what":"E0001","title":"Odin parse errors","text":"used feature yet implemented, intended implemented. Try later. Probably code written works well odin v1.x.x implemented odin2. cases, code produces error may future produce different error code, implementation forecast take .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1001","dir":"Articles","previous_headings":"","what":"E1001","title":"Odin parse errors","text":"able classify expression odin source code. Example:","code":"a + 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1002","dir":"Articles","previous_headings":"","what":"E1002","title":"Odin parse errors","text":"Invalid assignment data(). use data() right hand side expression, left hand side must symbol. Example:","code":"initial(x) <- data()"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1003","dir":"Articles","previous_headings":"","what":"E1003","title":"Odin parse errors","text":"Invalid input special lhs function (initial(), update(), etc). functions (currently) accept single unnamed argument. Examples:","code":"initial() <- 1 initial(a, b) <- 1 initial(x = a) <- 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1004","dir":"Articles","previous_headings":"","what":"E1004","title":"Odin parse errors","text":"Assignment reserved words (odin, C, C++ JavaScript) allowed. example statement trigger : error new keyword C++. list forbidden keywords can found vignette(\"functions\") (Section: “Restricted names”).","code":"new <- 2 * old"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1005","dir":"Articles","previous_headings":"","what":"E1005","title":"Odin parse errors","text":"Invalid target lhs assignment comparison relationship (~). quite ways invalid assignment target, present grouped within error. may split different errors future particular types error common difficult understand. Examples: code valid R (, can parsed) nonsensical. Generally, lhs assignment must symbol (e.g., <- 1). code also reported spelling mistake, instead initial(x), though try suggest appropriate function near miss. also reported code, contains two legacy errors. Firstly, error may made previous version, assignment <- comparison symbol ~. Furthermore, version, compare() function required , write d ~ Normal(0, 1). assign array, array name must symbol, invalid: : Sometimes see error accidentally nested special functions","code":"1 <- 10 inital(x) <- 1 compare(d) <- Normal(0, 1) f(x)[] <- 1 deriv(1[]) <- 1 deriv(deriv(x)) <- 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1006","dir":"Articles","previous_headings":"","what":"E1006","title":"Odin parse errors","text":"Invalid call parameter() function, used rhs assignment. error thrown failed parse arguments call parameter. full prototype parameter() : fail parse call : provide three arguments provide named arguments match three (default, constant differentiate) Example: fails value valid keyword argument parameter.","code":"parameter(default = NULL, constant = NULL, differentiate = FALSE) x <- parameter(value = 10)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1007","dir":"Articles","previous_headings":"","what":"E1007","title":"Odin parse errors","text":"Invalid default argument parameter(). Currently support little odin’s syntax within default argument definition, though future may support . ’s complicated (bit confusing) allow use variables end another copy dependency graph consider (able resolve possible relationships quantities used defaults quantities used). ’s impossible support future may consider . present, may perform arithmetic operations literal numbers. allows write: defining parameter default value 0.33333... without write long floating point number.","code":"a <- parameter(1 / 3)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1008","dir":"Articles","previous_headings":"","what":"E1008","title":"Odin parse errors","text":"Invalid differentiate argument parameter(). provided something literal TRUE FALSE (e.g., missing value, expression symbol).","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1009","dir":"Articles","previous_headings":"","what":"E1009","title":"Odin parse errors","text":"Invalid constant argument parameter(). provided something literal NULL, TRUE FALSE (e.g., missing value, expression symbol).","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1010","dir":"Articles","previous_headings":"","what":"E1010","title":"Odin parse errors","text":"Invalid call data() used right hand side. Currently function takes arguments, though later expand allow description data wish use. Example , somewhat hopefully requested d data integer don’t yet support . Probably supported future, interface yet decided. now data elements assumed scalar reals.","code":"d <- data(integer = TRUE)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1012","dir":"Articles","previous_headings":"","what":"E1012","title":"Odin parse errors","text":"Obsolete since 0.3.27, problems now included within E1005 Invalid argument lhs ~ comparison. Example lhs ~ comparison must symbol. may expand future support arrays .","code":"x / 2 ~ Normal(0, 1) 1 ~ Normal(0, 1)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1013","dir":"Articles","previous_headings":"","what":"E1013","title":"Odin parse errors","text":"Failed parse rhs ~ valid distribution. can fail many reasons, details failure come monty::monty_dsl_parse_distribution Example reasons failure include rhs : call (e.g., x ~ 1 call distribution function (e.g., x ~ sqrt(2)) invalid call (e.g., x ~ Normal(0, 1, 2)) details failure included body error message.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1014","dir":"Articles","previous_headings":"","what":"E1014","title":"Odin parse errors","text":"Invalid assignment parameter(). use parameter() right hand side expression, left hand side must symbol. Example:","code":"initial(x) <- parameter()"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1015","dir":"Articles","previous_headings":"","what":"E1015","title":"Odin parse errors","text":"Differentiable parameters must constant. written impossible. Parameters differentiable need able set dust::dust_system_update_pars() well model creation. Probably want set least one FALSE, omit argument accept default.","code":"a <- parameter(constant = TRUE, differentiate = TRUE)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1016","dir":"Articles","previous_headings":"","what":"E1016","title":"Odin parse errors","text":"Failed translate user() expression (valid odin version 2) call parameter(). likely code work old odin either.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1017","dir":"Articles","previous_headings":"","what":"E1017","title":"Odin parse errors","text":"Compatibility issues present system (e.g., using user() instead parameter() compatibility action \"error\". can, short term, disable failure using compatibility = \"warning\" compatibility = \"silent\", eventually become error always thrown running old odin code. error message explain update code use new odin2 syntax.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1018","dir":"Articles","previous_headings":"","what":"E1018","title":"Odin parse errors","text":"Failed parse call stochastic function (e.g., Normal()). errors come monty::monty_dsl_parse_distribution, typically function call match arguments candidate call (distributions multiple candidates, distinguished argument names). Example calls fail: details failure included body error message.","code":"* `Normal(1, 2, 3)` -- too many arguments * `Normal()` -- too few arguments * `Normal(mu = 0, sd = 1)` -- invalid argument names"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1019","dir":"Articles","previous_headings":"","what":"E1019","title":"Odin parse errors","text":"Invalid value zero_every argument initial(). present, must literal value, value must integer-like number (e.g., 2 2L). may relax future allow flexibility (e.g., variable contains integer-like number). Examples error","code":"initial(x, zero_every = a) <- 0 initial(y, zero_every = 2.5) <- 0"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1020","dir":"Articles","previous_headings":"","what":"E1020","title":"Odin parse errors","text":"right hand side call initial() uses zero_every argument 0, must . periodically reset values zero, initial condition zero makes sense. See dust2 docs periodic variables details. Examples error","code":"initial(x, zero_every = 1) <- 10 initial(x, zero_every = 1) <- a"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1021","dir":"Articles","previous_headings":"","what":"E1021","title":"Odin parse errors","text":"Invalid use special array access variable (e.g., , j, k) right hand side expression. available index variables determined rank (number dimensions) variable left hand side. vector can use right hand side, matrix can use j . Example causing error: , used k rhs, x matrix work. Think statement might appear generated pseudo-code: reason error apparent.","code":"x[, ] <- a[i, k] + a[i, j] for i in 1:nrow(x):   for j in 1:ncol(x):      x[i, j] <- a[i, k] + a[i, j]"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1022","dir":"Articles","previous_headings":"","what":"E1022","title":"Odin parse errors","text":"Invalid use : within left hand side array assignment. might increase number ways can use now quite strict (rules version 1 odin). use : must outermost operator within index, fine: can’t generally convert latter type :form, need code generation work, also R’s parsing rules fairly ambiguous really means (:b) + 1 :(b + 1)`.","code":"x[a:b] x[a:b + 1]"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1023","dir":"Articles","previous_headings":"","what":"E1023","title":"Odin parse errors","text":"Invalid functions used within array index. moment can use : (range operator, must outermost function call), +, - (. error indicate function tried use, feel unreasonable please let us know. may expand list supported functions within arrays future, candidates *, %/% %%.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1024","dir":"Articles","previous_headings":"","what":"E1024","title":"Odin parse errors","text":"Unary minus (- “negative” rather “minus”) detected within arrays. error special case E1023 deserves special mention special meaning R’s array access. R, can write means “x except first element”, something might support future.","code":"x[-1]"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1025","dir":"Articles","previous_headings":"","what":"E1025","title":"Odin parse errors","text":"Invalid use , j, etc left hand side expression, example: Usually, error can fixed omitting left hand side probably meant","code":"x[i] <- 2 * a[i] x[] <- 2 * a[i]"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1026","dir":"Articles","previous_headings":"","what":"E1026","title":"Odin parse errors","text":"Something unexpected used array index left hand side array expression, :","code":"x[TRUE] <- 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1027","dir":"Articles","previous_headings":"","what":"E1027","title":"Odin parse errors","text":"tried use function odin support. Example: ’s also possible simply misspelt function intended: R’s mathematical functions supported, please let us know need something don’t support.","code":"a <- pgamma(0, 1) a <- sqt(2)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1028","dir":"Articles","previous_headings":"","what":"E1028","title":"Odin parse errors","text":"Invalid call odin function. Usually, means provided many arguments, provided named argument function support. message guide fix mistake, machinery (currently) comes match.call can unhelpful times. Example: don’t yet support round’s digit argument, call fail.","code":"a <- round(b, 2)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1029","dir":"Articles","previous_headings":"","what":"E1029","title":"Odin parse errors","text":"Disallowed use named arguments. primitive R functions (e.g., + disallow use named argument forms). unlikely see error, interested know .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1030","dir":"Articles","previous_headings":"","what":"E1030","title":"Odin parse errors","text":"Incorrect number arguments function accept argument names. unlikely see error, interested know .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1031","dir":"Articles","previous_headings":"","what":"E1031","title":"Odin parse errors","text":"Invalid type argument parameter(). provided something literal \"real\", \"integer\" \"logical\" (e.g., missing value, expression, symbol, string).","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1032","dir":"Articles","previous_headings":"","what":"E1032","title":"Odin parse errors","text":"Impossible attempt differentiate parameter non-real type. differentiate integer logical parameters. Example: , must decide differentiable (case remove type argument) integer (case remove differentiate argument).","code":"a <- parameter(type = \"integer\", differentiate = TRUE)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1033","dir":"Articles","previous_headings":"","what":"E1033","title":"Odin parse errors","text":"argument sum must array. can either complete array (case argument symbol), indexed array. fine: first summing whole array second summing rows (element b contain sum corresponding row x. errors: summation associative (commutative) case write: complicated cases may jump hoops get expression want, may involve saving intermediate variable. example, rather writing: might write: See E1022 information case class error applied indexing left hand side assignment.","code":"a <- sum(x) b[] <- sum(x[, i]) a <- sum(a + y) b[] <- sum([, i] + 1) a <- sum(a) + sum(y) b[] <- sum([, i]) + 1 a <- sum(x^2) xx[] <- x[i]^2 a <- sum(xx)  # `E1034`  Invalid use of `:` within a partial sum.  If you use `:` it must be the *outermost* operator within an index, so this is fine:  ```r sum(x[a:b]) sum(x[a:b + 1])"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1035","dir":"Articles","previous_headings":"","what":"E1035","title":"Odin parse errors","text":"Invalid arguments interpolation. first two arguments (time value, respectively) must symbols corresponding arrays. whole array used interpolate() subset.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1036","dir":"Articles","previous_headings":"","what":"E1036","title":"Odin parse errors","text":"Invalid interpolation mode. mode argument interpolate must string, must one values \"constant\" (piecewise constant), \"linear\" (piecewise linear) \"spline\" (cubic splines). Example:","code":"a <- interpolate(at, ay, \"wiggly\")"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1037","dir":"Articles","previous_headings":"","what":"E1037","title":"Odin parse errors","text":"Calls interpolate must assigned symbol, affect whole structure. Rather writing: expect see similar requirement array-valued parameters assigned (contrast odin version 1).","code":"a[] <- interpolate(at, ay, \"linear\") dim(a) <- 10 a <- interpolate(at, ay, \"linear\") dim(a) <- 10"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1038","dir":"Articles","previous_headings":"","what":"E1038","title":"Odin parse errors","text":"equation reference . types equations can reference , example: However, general makes little sense disallowed, example: allowed cycle graph b (special case E2005).","code":"update(x) <- x + 1         # references 'x' from the previous step deriv(x) <- x              # derivative referencing the actual variable x[2:n] <- x[i] / x[i - 1]  # referencing elsewhere in the array b <- b + 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1039","dir":"Articles","previous_headings":"","what":"E1039","title":"Odin parse errors","text":"Array extent stochastic. really special case E2011 detectable single expression. example throw error :","code":"dim(a) <- Poisson(2)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1040","dir":"Articles","previous_headings":"","what":"E1040","title":"Odin parse errors","text":"Array extent determined time. really special case E2011 detectable single expression. example throw error :","code":"dim(a) <- if (time > 10) 100 else 20"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1041","dir":"Articles","previous_headings":"","what":"E1041","title":"Odin parse errors","text":"Special functions right-hand-side expression must expression . applies parameter(), interpolate(), data() delay(); used must expression right hand side. example write: might write :","code":"x <- interpolate(at, ay) + interpolate(bt, by) a <- interpolate(at, ay) b <- interpolate(bt, by) x <- a + b"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1042","dir":"Articles","previous_headings":"","what":"E1042","title":"Odin parse errors","text":"Invalid special function used right hand side. odin functions can used lhs; include initial, update deriv. write :","code":"a <- x + deriv(y)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1043","dir":"Articles","previous_headings":"","what":"E1043","title":"Odin parse errors","text":"Invalid functions used expression dim(). Currently dim() quite limited can accept (though slightly relaxed odin1). can use +, -, (, length, nrow ncol nothing else. Let us know think able use .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1044","dir":"Articles","previous_headings":"","what":"E1044","title":"Odin parse errors","text":"Attempt call something name function. might 1 symbol, fails. possible errors, valid R code valid odin code, might include: f(x) might return function R, possible odin.","code":"a <- 1(x) a <- f(x)(y)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1045","dir":"Articles","previous_headings":"","what":"E1045","title":"Odin parse errors","text":"Attempt use one R’s reserved words: function, , repeat, , etc.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1046","dir":"Articles","previous_headings":"","what":"E1046","title":"Odin parse errors","text":"statements must else clause. write: really (R) valid odin can’t assign NULL value. Always provide else branch.","code":"a <- if (condition) 1 a <- if (condition) 1 else NULL"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1047","dir":"Articles","previous_headings":"","what":"E1047","title":"Odin parse errors","text":"Assignment name starts restricted prefix. Names begin odin_, interpolate_, delay_ adjoint_. example trigger :","code":"delay_cases_days <- 10"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1048","dir":"Articles","previous_headings":"","what":"E1048","title":"Odin parse errors","text":"assign time. Prior odin2, allowed t name time continuous-time models discrete time models sometimes wrote: can migrate special case, assignments time disallowed, need update model. See vignette(\"migrating\") information.","code":"time <- step * dt"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1049","dir":"Articles","previous_headings":"","what":"E1049","title":"Odin parse errors","text":"assign dt. Prior odin2, dt controlled, now control dt via dust2::dust_system_create dust2::dust_filter_create etc. Previously might written longer allowed. can migrate special case, uses disallowed need update model. See vignette(\"migrating\") information.","code":"dt <- parameter(0.5) # or really user() in old odin code dt <- 0.5"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1050","dir":"Articles","previous_headings":"","what":"E1050","title":"Odin parse errors","text":"use step within discrete time models. Prior odin version 2, step variable automatically provided odin time basis discrete time models; models started step 0 increased one time step. longer support , instead models start real-valued (integral) time increment step size dt (must form 1 / <integer>). need adapt code fix error, may require features still developing. Please see vignette(\"migrating\") details.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1051","dir":"Articles","previous_headings":"","what":"E1051","title":"Odin parse errors","text":"Array parameters defaults. array (rank), error: future, may allow allow filling array value initialisation. However, ’d also like support something like default value vector 1:3; however quite hard validate generalises poorly higher dimensions. thoughts use-cases welcome.","code":"a <- parameter(1) a <- parameter(c(1, 2, 3))"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1052","dir":"Articles","previous_headings":"","what":"E1052","title":"Odin parse errors","text":"Failed parse call print(). error thrown failed parse arguments call print. full prototype print() : fail parse call : provide two arguments provide named arguments match two (string, )","code":"print(string, when = NULL)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1053","dir":"Articles","previous_headings":"","what":"E1053","title":"Odin parse errors","text":"Invalid first (string) argument print(). argument must string, must parseable glue::glue() using curly-brace delimiters, must contain least one template argument. see error, ’s likely failed terminate template, : , might meant write \"v: {value}\" (note closing }), terminate template, glue failed parse string.","code":"print(\"v: {value\")"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1054","dir":"Articles","previous_headings":"","what":"E1054","title":"Odin parse errors","text":"Failed parse template within print string. Unlike E1053 error within template. Typically one two issues: expression within {} valid R format specifier ; interpretable (see vignette(\"debugging\") details) Examples","code":"print(\"x: {x + }\") # invalid as `x +` is an incomplete expression print(\"x: {x; q}\") # invalid as `q` is not an sprintf format"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1055","dir":"Articles","previous_headings":"","what":"E1055","title":"Odin parse errors","text":"Invalid use rank argument parameter() call assign dimensions. might written place include rank argument. Instead, go onto call dim() left-hand-side.","code":"a <- parameter(rank = 2)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1056","dir":"Articles","previous_headings":"","what":"E1056","title":"Odin parse errors","text":"Missing rank argument call parameter() assigns dim(). may written need know rank (vector, matrix, etc). can fix writing value rank argument literal integer. See vignette(\"functions\") information interface.","code":"dim(a) <- parameter() dim(a) <- parameter(rank = 2)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1057","dir":"Articles","previous_headings":"","what":"E1057","title":"Odin parse errors","text":"Invalid value rank argument parameter(). given must positive size; literally integer value 1, 2, 3, …, 8. use variable .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1058","dir":"Articles","previous_headings":"","what":"E1058","title":"Odin parse errors","text":"Failed migrate expression form never found assignment like determine rank. might ’ve removed square brackets original, original assignment simply missing. code compile odin1 see error code please let us know.","code":"dim(a) <- user() a[] <- user()"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1059","dir":"Articles","previous_headings":"","what":"E1059","title":"Odin parse errors","text":"Failed parse call browser(). Note shares ideas core implementation R’s browser(), call odin code different must form phase phase evaluate browser (one update deriv now) expression describing conditions evaluate browser call.","code":"browser(phase, when)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1060","dir":"Articles","previous_headings":"","what":"E1060","title":"Odin parse errors","text":"Invalid phase argument call browser(). Currently must one update deriv, may expand future.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1061","dir":"Articles","previous_headings":"","what":"E1061","title":"Odin parse errors","text":"can use built-constant pi right hand side expression, without setting . use left-hand side expression.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1062","dir":"Articles","previous_headings":"","what":"E1062","title":"Odin parse errors","text":"use missing values (NA) within expressions. Handling missing values C++ code complicated, particularly following semantics R uses, missing values integers logicals, sensible propagation missingness expressions. systems missing value propagate though whole system quickly don’t expect useful. Example code throw error:","code":"a <- NA"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1063","dir":"Articles","previous_headings":"","what":"E1063","title":"Odin parse errors","text":"Trying use arguments min max parameter() call defining logical parameter. supported logical parameters can take values TRUE FALSE. Example code throw error:","code":"a <- parameter(type = \"logical\", min = 0)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1064","dir":"Articles","previous_headings":"","what":"E1064","title":"Odin parse errors","text":"Invalid argument min max parameter() call. can use numbers , expressions symbols. may relax future, please let us know problem. Example assignments throw error:","code":"a <- parameter(min = 1/2)  # 1/2 is really an expression, use 0.5 instead b <- parameter(max = a)    # would create dependency issues c <- parameter(min = TRUE) # not a number d <- parameter(max = NaN)  # also not a number!"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1065","dir":"Articles","previous_headings":"","what":"E1065","title":"Odin parse errors","text":"Impossible range implied min max parameter() call. thrown min greater equal max either means really constant, value can satisfy relationship. Example assignment throw error","code":"a <- parameter(min = 10, max = 0)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1066","dir":"Articles","previous_headings":"","what":"E1066","title":"Odin parse errors","text":"dim function used right hand side takes name array whose dimensions copied. example: valid, resulting b c dimensions . , however, incorrect:","code":"dim(b) <- dim(a) dim(c) <- dim(b) dim(a) <- dim(1) dim(a) <- dim(b[]) dim(a) <- dim(a * 2) dim(a) <- dim(a + 5)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1067","dir":"Articles","previous_headings":"","what":"E1067","title":"Odin parse errors","text":"Invalid call top delay() function, used rhs assignment. error thrown failed parse arguments call delay. full prototype delay() : arguments required typically unnamed. fail parse call : provide number two arguments provide named arguments match two ()","code":"delay(what, by)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1068","dir":"Articles","previous_headings":"","what":"E1068","title":"Odin parse errors","text":"first () argument delay() must symbol; name variable derived quantity delay. (currently least) complex expression, though may relax future, number. Examples cause error:","code":"delay(a + 1, tau) delay(1, tau)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1069","dir":"Articles","previous_headings":"","what":"E1069","title":"Odin parse errors","text":"second () argument delay() must symbol number. complex expression. example cause error: can fix writing:","code":"delay(a, b + 1) delay(a, b1) b1 <- b + 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e1070","dir":"Articles","previous_headings":"","what":"E1070","title":"Odin parse errors","text":"Calls delay must assigned symbol, affect whole structure. Rather writing: expect see similar requirement array-valued parameters assigned (contrast odin version 1).","code":"a[] <- delay(b, tau) dim(a) <- 10 a <- delay(b, tau) dim(a) <- 10"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2001","dir":"Articles","previous_headings":"","what":"E2001","title":"Odin parse errors","text":"system equations include expressions initial() lhs. derive set variables , least one must present.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2002","dir":"Articles","previous_headings":"","what":"E2002","title":"Odin parse errors","text":"call deriv() update() lhs equation. Every call initial() requires call deriv() update(), even single call either can’t tell sort time model runs (.e., works continuous discrete time). error related E2004, separate can’t describe missing properly.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2003","dir":"Articles","previous_headings":"","what":"E2003","title":"Odin parse errors","text":"Variables missing initial conditions. variables used deriv() update() require corresponding entry initial() set initial conditions. error highlight lines deriv() update() call lacks call initial(). can sometimes spelling error call initial().","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2004","dir":"Articles","previous_headings":"","what":"E2004","title":"Odin parse errors","text":"Variables missing calls deriv() update() system use different equations deriv()/update() variables defined initial(). error equations deriv()/update() don’t corresponding equation using initial(), equations initial() don’t corresponding deriv() update() equation. error highlight lines might involved error.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2005","dir":"Articles","previous_headings":"","what":"E2005","title":"Odin parse errors","text":"Cyclic dependency detected within equations. ways can happen. simplest equation references , example: Unlike R, disallowed, variable may assigned within target function system. assignment much like mathematical equation usual programming statements. can get complicated cycles, example: depends c, c depends b b depends . error reference variables involved cycle. possible one cycle within reported expressions.","code":"a <- a + 1 a <- c / 2 b <- sqrt(a) c <- a + 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2006","dir":"Articles","previous_headings":"","what":"E2006","title":"Odin parse errors","text":"Undefined variable used equation. error means referenced variable exist within odin system. Common reasons error include: spelling mistake: ’ve referenced variable similar one meant (may add “mean support” future; let us know saved time). Trying reference variables defined R’s environment odin. impossible, might want make parameter, perhaps. Example: error v (referenced r, referenced update()) undefined.","code":"initial(a) <- 1 update(a) <- a * r r <- exp(v)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2007","dir":"Articles","previous_headings":"","what":"E2007","title":"Odin parse errors","text":"Trying use dt continuous time (ODE) system. really special case E2006, treat separately usually means something gone badly system design.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2008","dir":"Articles","previous_headings":"","what":"E2008","title":"Odin parse errors","text":"expression assigning array corresponding call dim(). always need , even looks like able work long array . probably just need add call like variables mentioned error, appropriate lengths.","code":"dim(x) <- ..."},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2009","dir":"Articles","previous_headings":"","what":"E2009","title":"Odin parse errors","text":"tried assign array variable (.e., something dim() call) without using [] left hand side. Example: wanted length-5 array zeros , write","code":"dim(a) <- 5 a <- 0 a[] <- 0"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2010","dir":"Articles","previous_headings":"","what":"E2010","title":"Odin parse errors","text":"Can’t reference data outside equations compare data. tried reference data (variable exists lhs call data()) equation used anywhere comparison expression (involving ~, dependency equations). , data exist point. ’s trivial example error: , d defines data, try use update() just can’t .","code":"initial(x) <- 1 update(x) <- x + d d <- data()"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2011","dir":"Articles","previous_headings":"","what":"E2011","title":"Odin parse errors","text":"Array extents must determined system creation. means changed setting parameters model, time. example throw error: , parameter constant (can updated); can fix writing : Similarly, n depended time, (depended ) anything stochastic, error array dimension change every time step.","code":"dim(a) <- n n <- parameter(type = \"integer\") dim(a) <- n n <- parameter(type = \"integer\", constant = TRUE)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2012","dir":"Articles","previous_headings":"","what":"E2012","title":"Odin parse errors","text":"Assignments variable must arrays. write, example: compute two stages. Sometimes error thrown inconsistent use array-assignment square brackets, example: , first line probably [] <- 0 ora[1] <- 0`.","code":"a <- 1 + 2 a <- sqrt(a) a <- 0 a[2] <- 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2013","dir":"Articles","previous_headings":"","what":"E2013","title":"Odin parse errors","text":"Multiline array equations must written consecutive statements, assignments variables (comments fine). error: assignment b occurs within block assignments []. evaluate expressions, assignments happen one go (order written) interleave gives false idea controlling flow equations really can.","code":"a[1] <- 1 b <- 10 a[2] <- b"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2014","dir":"Articles","previous_headings":"","what":"E2014","title":"Odin parse errors","text":"equation name shadows variable. may written something like: invalid ordinary equation also part system state.","code":"initial(a) <- 1 update(a) <- a + 1 a <- 2"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2015","dir":"Articles","previous_headings":"","what":"E2015","title":"Odin parse errors","text":"Invalid rank inputs interpolate(). time input (first argument) must always vector (rank 1), sequence times corresponding times inputs interpolate. value input (second argument) rank one greater output. : output scalar, value must vector output vector, value must matrix output matrix, value must 3-dimensional array . error thrown inputs satisfy tests.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2016","dir":"Articles","previous_headings":"","what":"E2016","title":"Odin parse errors","text":"system contains unused equations. currently always error (odin1 converted warning, message ignored), may allow downgrading error future version. Code generate error: , unused. Perhaps meant initial condition, amount x incremented, present nothing.","code":"update(x) <- x + 1 initial(x) <- x a <- 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2017","dir":"Articles","previous_headings":"","what":"E2017","title":"Odin parse errors","text":"Attempt browse phase exist. call like system ODEs update phase. error indicate phases valid.","code":"browser(\"update\")"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2018","dir":"Articles","previous_headings":"","what":"E2018","title":"Odin parse errors","text":"Array rank expression differs rank declared dim , number dimensions variable expression different number declared dim function, source truth rank. example, might declare matrix 3-dimensional structure like :- use expressions, rank must match declaration . examples valid syntax:- :-","code":"dim(xy) <- c(5,5) dim(xyz) <- parameter(rank = 3) initial(xy[, ]) <- 0 xyz[1, 2, 3] <- 5 xy <- sum(xyz[1, ,]) update(xy[]) <- 1 xyz[1, 2] <- xyz[1, 2] + 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2019","dir":"Articles","previous_headings":"","what":"E2019","title":"Odin parse errors","text":"length, ncol nrow functions take argument whole array, matrix, higher-order structure, without brackets indexing. valid, invalid.","code":"dim(x) <- c(5,5) y <- length(x) y <- length(x[, 1] y <- length(x[])"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2020","dir":"Articles","previous_headings":"","what":"E2020","title":"Odin parse errors","text":"output() used (lhs) within discrete-time system. can use output() within systems involve deriv() provides way computing variables derivatives. writing discrete-time system, use update() corresponding initial() statement.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2021","dir":"Articles","previous_headings":"","what":"E2021","title":"Odin parse errors","text":"tried set dimensions variable . example: see error, used b[] right hand side (probably!; might meant [] <- b[1], ).","code":"dim(a, b) <- 2 dim(b, c) <- 3  # `E2022`  Trying to access an array without using square bracket indexes.  For example if you write:  ```r dim(b) <- 10 a[] <- b"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2023","dir":"Articles","previous_headings":"","what":"E2023","title":"Odin parse errors","text":"Multiple calls browser() targetting phase. example browser call always put end phase, repeating browser() achieve anything.","code":"a <- time * 2 browser(\"update\") b <- a + 1 browser(\"update\")"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2024","dir":"Articles","previous_headings":"","what":"E2024","title":"Odin parse errors","text":"use delay() within discrete-time system. can support delay differential equation models; delays discrete-time systems need handled differently. Let us know need , removed feature odin1 ~2017 seem missed.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2025","dir":"Articles","previous_headings":"","what":"E2025","title":"Odin parse errors","text":"delay time (second argument delay()) constant, .e., determined system creation. taking parameter, ensure specified constant = TRUE (disallows changing parameter via dust2::dust_system_update_pars()). requirement stems current design delay differential equation solver dust may relax causes difficulty.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2026","dir":"Articles","previous_headings":"","what":"E2026","title":"Odin parse errors","text":"Invalid use empty index range operator right hand side array expression. , example, write , accesses c problematic refer vector. might forgotten write sum(c[, ]) reduction converted vector. rule apply within sum() reductions.","code":"a[] <- b + c[i, ] a[] <- b + c[i, 2:3]"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2027","dir":"Articles","previous_headings":"","what":"E2027","title":"Odin parse errors","text":"Delayed expression involve variables. tried use delay() delay expression involve ODE variables (involve deriv()), either directly indirectly. example: throw error b constant time. error usually indicates written model intended write.","code":"b <- 1 a <- delay(b, 10)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2028","dir":"Articles","previous_headings":"","what":"E2028","title":"Odin parse errors","text":"Delayed expression involves data (introduced data() function). example: y involves variable x also data d, possible.","code":"d <- data() deriv(x) <- 1 y <- x + d a <- delay(y, 5)"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e2029","dir":"Articles","previous_headings":"","what":"E2029","title":"Odin parse errors","text":"Incompatible dimensionality delayed expression (first argument delay) object assigned . delayed expression always dimensionality (delayed scalar scalar, delayed matrix matrix, etc), left hand side delay() call needs dimensionality (size!) expression delayed. example, error: b vector scalar.","code":"a <- x * 2 b <- delay(a) dim(b) <- 1"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e3001","dir":"Articles","previous_headings":"","what":"E3001","title":"Odin parse errors","text":"array access bounds. error thrown code result reading writing bounds array (dimension array). Currently, throw error certain access invalid. example, error code contains: accessing position 5 due loop x, 4 elements. complex errors possible, may possible obviously reverse odin’s chain logic deciding access bounds; please let us know find difficult--explain cases can use try make clearer.","code":"x[] <- a[i] dim(x) <- 5 dim(a) <- 4"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e3002","dir":"Articles","previous_headings":"","what":"E3002","title":"Odin parse errors","text":"Incompatible sizes arguments interpolate(). array sizes arguments “target” (variable left hand side), must compatible . Consider expression: target can scalar, vector higher dimensional object. time argument b always vector (say length nt) value c dimensions c(dim(), nt); dimensions followed number time elements. : scalar, c must vector length nt vector length n1, c must matrix n1 rows nt columns matrix n1 rows n2 columns, c must 3-dimensional array dimensions c(n1, n2, nt) ","code":"a <- interpolate(b, c, \"constant\")"},{"path":"https://mrc-ide.github.io/odin2/articles/errors.html","id":"e3003","dir":"Articles","previous_headings":"","what":"E3003","title":"Odin parse errors","text":"failed analyse bounds correctly, consider odin bug. can’t continue analysis, ’d like see model code order improve odin. Rerun odin check_bounds = \"disabled\" skip error meantime.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"setting-the-scene","dir":"Articles","previous_headings":"","what":"Setting the scene","title":"Fitting odin2 models to data","text":"’ll start simple data set daily cases disease time  data shows classic epidemic, cases rising peak falling. try fitting simple compartmental SIR (Susceptible-Infected-Recovered) model, write odin2. number possible ways writing , ’ll go stochastic discrete-time version, mostly allow us demonstrate number features odin2, dust2 monty (ODE version yet written). fitting data, ’ll write model captures core ideas (replicated vignette(\"odin2\")), equation incidence added (number new infections one time unit). can initialise system simulate time series plot results data: dust_system_simulate() function returns n_state n_particle n_time matrix (, 4 x 20 x 101). ’re interested incidence, extracting gives us 20 x 101 matrix, ’ll transpose order plot :  modelled trajectories grey, data points overlaid red – ’re great job capturing data.","code":"data <- read.csv(\"incidence.csv\") head(data) #>   cases time #> 1     3    1 #> 2     2    2 #> 3     2    3 #> 4     2    4 #> 5     1    5 #> 6     3    6 plot(cases ~ time, data, pch = 19, las = 1,      xlab = \"Time (days)\", ylab = \"Cases\") sir <- odin({   initial(S) <- N - I0   initial(I) <- I0   initial(R) <- 0   initial(incidence, zero_every = 1) <- 0   update(S) <- S - n_SI   update(I) <- I + n_SI - n_IR   update(R) <- R + n_IR   update(incidence) <- incidence + n_SI   n_SI <- Binomial(S, p_SI)   n_IR <- Binomial(I, p_IR)   p_SI <- 1 - exp(-beta * I / N * dt)   p_IR <- 1 - exp(-gamma * dt)   beta <- parameter()   gamma <- parameter()   I0 <- parameter()   N <- 1000 }, quiet = TRUE) pars <- list(beta = 0.3, gamma = 0.1, I0 = 5) sys <- dust_system_create(sir(), pars, n_particles = 20, dt = 0.25) dust_system_set_state_initial(sys) time <- 0:100 y <- dust_system_simulate(sys, time) incidence <- dust_unpack_state(sys, y)$incidence matplot(time, t(incidence), type = \"l\", lty = 1, col = \"#00000055\",         xlab = \"Time (days)\", ylab = \"Cases\", las = 1) points(cases ~ time, data, pch = 19, col = \"red\")"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"comparing-to-data","dir":"Articles","previous_headings":"","what":"Comparing to data","title":"Fitting odin2 models to data","text":"’re interested fitting model data, first thing need measure goodness fit, can also code odin model, first ’ll explain idea. system moves forward time finds new data point; point time one several particles present. ask particle likely data point . means calculations per-particle per-data-point. , ’ll use Poisson ask “probability observing many cases mean equal modelled number daily cases”. syntax looks bit different odin code : last two lines new addition odin code. first says cases found data. second restates aim previous paragraph, comparing observed cases modelled incidence. syntax designed echo monty DSL. version model can compute likelihoods dust2’s machinery.","code":"sir <- odin({   initial(S) <- N - I0   initial(I) <- I0   initial(R) <- 0   initial(incidence, zero_every = 1) <- 0   update(S) <- S - n_SI   update(I) <- I + n_SI - n_IR   update(R) <- R + n_IR   update(incidence) <- incidence + n_SI   n_SI <- Binomial(S, p_SI)   n_IR <- Binomial(I, p_IR)   p_SI <- 1 - exp(-beta * I / N * dt)   p_IR <- 1 - exp(-gamma * dt)   beta <- parameter()   gamma <- parameter()   I0 <- parameter()   N <- 1000    # Comparison to data   cases <- data()   cases ~ Poisson(incidence) }, quiet = TRUE)"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"stochastic-likelihood-with-a-particle-filter","dir":"Articles","previous_headings":"","what":"Stochastic likelihood with a particle filter","title":"Fitting odin2 models to data","text":"system stochastic; particle produce different trajectory different likelihood. time run system get different combination likelihoods. can use particle filter generate estimate marginal likelihood, averaging stochasticity. works resampling particles point along time series, according likely . time run filter likelihood slightly () different: run filter enough times distribution emerge course. Let’s compare two points parameter space, varying beta parameter running filter 100 times :  even relatively small difference parameter leads difference log-likelihood easily detectable 100 runs filter, even distributions overlap. However, make optimisation-based approaches inference, maximum likelihood, tricky ’s hard know way “” time try point might return different height. run particle filter argument save_trajectories = TRUE save trajectories particles time: can access dust_likelihood_last_trajectories(): result 4 x 100 x 200 array: dimensions represent, turn: 4 state variables 200 particles 100 time steps (corresponding data) Considering just incidence, plotting time, may able make tree structure trajectories, fewer distinct traces start time series, traces heavily represented final sample others:","code":"filter <- dust_filter_create(sir(), 0, data, n_particles = 200) dust_likelihood_run(filter, pars) #> [1] -282.4783 dust_likelihood_run(filter, pars) #> [1] -273.9318 pars1 <- modifyList(pars, list(beta = 0.25)) pars2 <- modifyList(pars, list(beta = 0.23)) ll1 <- replicate(100, dust_likelihood_run(filter, pars1)) ll2 <- replicate(100, dust_likelihood_run(filter, pars2))  xb <- seq(floor(min(ll1, ll2)), ceiling(max(ll1, ll2)), by = 1) hist(ll2, breaks = xb, col = \"#0000ff99\", freq = FALSE,      xlab = \"Log likelihood\", ylab = \"Density\", main = \"\") hist(ll1, breaks = xb, add = TRUE, freq = FALSE, col = \"#ff000099\") abline(v = c(mean(ll1), mean(ll2)), col = c(\"red\", \"blue\"), lwd = 2) dust_likelihood_run(filter, list(beta = 0.2, gamma = 0.1),                     save_trajectories = TRUE) #> [1] -245.1714 h <- dust_likelihood_last_trajectories(filter) dim(h) #> [1]   4 200 100 incidence <- dust_unpack_state(sys, h)$incidence matplot(t(incidence), type = \"l\", lty = 1, col = \"#00000022\") points(cases ~ time, data, pch = 19, col = \"red\")"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"inference-with-particle-mcmc-pmcmc","dir":"Articles","previous_headings":"","what":"Inference with particle MCMC (pMCMC)","title":"Fitting odin2 models to data","text":"can use MCMC explore model, need prior. ’ll use monty’s DSL create one; looks similar odin code : define prior covers beta gamma, two three input parameters odin model. prior monty_model object, can use sample , compute log densities (compute prior), etc. also need adapt dust2 filter object use monty. need describe vector statistical parameters (beta gamma) converted inputs sir system needs run (list elements beta, gamma I0). monty_packer object: packer can convert list name-value pairs suitable initialising dust2 system vector parameters suitable use monty: can carry inverse: Combining filter packer create monty model, ’ll call likelihood, ’s represents: likelihood now also monty_model object: monty package provides high-level interface working objects. example, compute likelihood now use monty_model_density(): difference using dust_likelihood_run now provide parameter vector statistical model, rather inputs odin/dust model. conforms interface monty uses lets us run things like MCMC. can combine prior likelihood create posterior: last ingredient required running MCMC sampler. don’t much choice model likelihood stochastic, ’ll need run simple random walk. However, still need proposal matrix (variance covariance matrix parameter multivariate Gaussian - ’ll draw new positions ). ideal world, distribution similar shape target distribution (posterior) help mixing. get started, ’ll use uncorrelated random walk parameter fairly wide variance 0.02 can now run MCMC 100 samples need develop nice tools working outputs sampler, now bear grubby base R manipulation. likelihood “sticky”  ’s hard say great deal parameters beta (per-contact transmission rate) gamma (recovery rate) samples, especially effective samples:","code":"prior <- monty_dsl({   beta ~ Exponential(mean = 0.3)   gamma ~ Exponential(mean = 0.1) }) sir_packer <- monty_packer(c(\"beta\", \"gamma\"), fixed = list(I0 = 5)) sir_packer$pack(pars) #> [1] 0.3 0.1 sir_packer$unpack(c(0.3, 0.1)) #> $beta #> [1] 0.3 #>  #> $gamma #> [1] 0.1 #>  #> $I0 #> [1] 5 likelihood <- dust_likelihood_monty(filter, sir_packer) likelihood #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'beta' and 'gamma' #> ℹ This model: #> • is stochastic #> ℹ See `?monty_model()` for more information monty_model_density(likelihood, c(0.2, 0.1)) #> [1] -246.2969 posterior <- prior + likelihood sampler <- monty_sampler_random_walk(diag(2) * 0.02) samples <- monty_sample(posterior, sampler, 100,                         initial = sir_packer$pack(pars)) #> ⡀⠀ Sampling  ■                                |   1% ETA:  1s #> ✔ Sampled 100 steps across 1 chain in 399ms #> plot(samples$density, type = \"l\") plot(t(drop(samples$pars)), pch = 19, col = \"#00000055\")"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"effective-sampling","dir":"Articles","previous_headings":"Inference with particle MCMC (pMCMC)","what":"Effective sampling","title":"Fitting odin2 models to data","text":"several things can improve chain mixes can try find better proposal kernel. can increase number particles used filter. reduce variance estimate marginal likelihood, means random walk less confused fluctuations surface ’s moving . comes computational cost though. can increase number threads (effectively CPU cores) using computing likelihood. scale fairly efficiently least 10 cores, likelihood calculations almost embarrassingly parallel. help offset costs incurred . can run multiple chains . don’t yet good parallel runner implemented monty coming soon. reduce wall time (chain runs time) also allows us compute convergence diagnostics reveal well (badly) . can try deterministic model (see ) get sense general region high probability space. , apply suggestions , using variance-covariance matrix prepared earlier: likelihood now quickly rises stable range clearly mixing:  parameters beta (per-contact transmission rate) gamma (recovery rate) strongly correlated","code":"filter <- dust_unfilter_create(sir(), 0, data, n_particles = 1000) likelihood <- dust_likelihood_monty(filter, sir_packer) vcv <- matrix(c(0.0005, 0.0003, 0.0003, 0.0003), 2, 2) sampler <- monty_sampler_random_walk(vcv) samples <- monty_sample(posterior, sampler, 1000,                         initial = sir_packer$pack(pars)) #> ⡀⠀ Sampling  ■■■■■■■■■■■■                     |  37% ETA:  3s #> ✔ Sampled 1000 steps across 1 chain in 4.2s #> plot(samples$density, type = \"l\") plot(t(drop(samples$pars)), pch = 19, col = \"#00000055\")"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"comparing-against-vectors-of-data","dir":"Articles","previous_headings":"","what":"Comparing against vectors of data","title":"Fitting odin2 models to data","text":", comparing single point data (per interval), cases vectors higher-dimensional objects data. might case fitting age-disaggregated data. case might write something like syntax generalises approach handling arrays rest odin code: cases still defined coming data add dim() equation say cases n_age elements actual comparison now processed element-wise age groups, observed cases per age group compared corresponding modelled incidence value. Missing data handled elementwise, calculation applied every age group data. Passing data system bit awkward longer nice time--datastream variable. way support “list columns”, may seen tidyverse packages (example tidyr::nest vignette). Normally, might make time--incidence data.frame writing: make list-column incidence pass list number elements rows, number elements per list element age groups. wrap (), example:","code":"cases <- data()   dim(cases) <- n_age   cases[] ~ Poisson(incidence[i]) data.frame(time = c(1, 2, 3, 4), incidence = c(0, 4, 6, 10)) #>   time incidence #> 1    1         0 #> 2    2         4 #> 3    3         6 #> 4    4        10 data.frame(time = c(1, 2, 3, 4),            incidence = I(list(c(0, 1), c(4, 3), c(6, 7), c(10, 11)))) #>   time incidence #> 1    1      0, 1 #> 2    2      4, 3 #> 3    3      6, 7 #> 4    4    10, 11"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"deterministic-models-from-stochastic","dir":"Articles","previous_headings":"","what":"Deterministic models from stochastic","title":"Fitting odin2 models to data","text":"Another way fitting model simply throw away stochasticity. model lines stochastic portion model. time step compute number individuals make transition S R sampling binomial distribution. can replace calls expectations (effectively making n_SI = S * p_SI) running model “deterministic” mode. simplification stochastic model can seen taking expectations underlying random process, ’s reason expect represents mean whole model (E[f(x)]≠f(E[x])E[f(x)] \\neq f(E[x]), least generally). found simplifications useful: stochastic, can use adaptive MCMC efficient algorithms orders magnitude faster, instead running 100s thousands particles per likelihood evaluation just run one region high probability density deterministic model often within (broader) region high probability density stochastic model, can use models create reasonable starting parameter values chains signs relative magnitudes covariances among parameters often similar deterministic stochastic model, can use deterministic model estimate variance-covariance matrix stochastic model – though need increase quantities Obviously, approximation comes costs though: longer integer valued quantities expectations samples discrete distributions, think fractional individuals model can longer account stochastic effects, e.g., low population sizes. can make model overly rigid, may poorly account observed patterns fixed dt approach first order Euler solver offers stability guarantees, differ system ODEs solved better ODE solver create deterministic “filter” (currently, temporarily called “unfilter”), use dust_unfilter_create() place dust_filter_create. replace calls stochastic functions expectations point call. contrast filter, , multiple calls unfilter parameter set yield result. can now proceed , reusing packer, prior sampler objects, still useable : , can see 1000 samples deterministic model (blue) overlaid top samples stochastic model (grey):  estimated parameters look overall shifted higher deterministic model, correlation parameters stronger. However, idea “good” parameters might , can get us approximately right location.","code":"n_SI <- Binomial(S, p_SI)   n_IR <- Binomial(I, p_IR) unfilter <- dust_unfilter_create(sir(), 0, data) dust_likelihood_run(unfilter, pars) #> [1] -543.8531 dust_likelihood_run(unfilter, pars) #> [1] -543.8531 likelihood_det <- dust_likelihood_monty(unfilter, sir_packer) posterior_det <- prior + likelihood_det samples_det <- monty_sample(posterior_det, sampler, 1000,                             initial = sir_packer$pack(pars)) #> ⡀⠀ Sampling  ■                                |   0% ETA:  2s #> ✔ Sampled 1000 steps across 1 chain in 206ms #> plot(t(drop(samples$pars)), pch = 19, col = \"#00000033\") points(t(drop(samples_det$pars)), pch = 19, col = \"#0000ff33\")"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"differentiable-models","dir":"Articles","previous_headings":"","what":"Differentiable models","title":"Fitting odin2 models to data","text":"can go step simply turning stochasticity create deterministic model; now ’ve got deterministic likelihood function can also differentiate likelihood respect () parameters. model , except definition beta gamma, now contain argument derivative = TRUE. system can used stochastic model (created via dust_filter_create) just . difference model created using dust_unfilter_create(). run unfilter, can now provide argument adjoint = TRUE enable use dust_likelihood_last_gradient() (may make default future). can create monty model , : model advertises can compute gradients now! monty can use monty_model_density() monty_model_gradient() compute log-likelihoods gradients. prior contained gradient information, posterior created version model also gradients: model configured way, can use Hamiltonian Monte Carlo method monty_sampler_hmc(), can far efficient random walk tuned. WARNING: Using derivative = TRUE parameters effect making rest use constant = TRUE. describe effects vignette differentiable models, soon.","code":"sir <- odin2::odin({   initial(S) <- N - I0   initial(I) <- I0   initial(R) <- 0   initial(incidence, zero_every = 1) <- 0   update(S) <- S - n_SI   update(I) <- I + n_SI - n_IR   update(R) <- R + n_IR   update(incidence) <- incidence + n_SI   n_SI <- Binomial(S, p_SI)   n_IR <- Binomial(I, p_IR)   p_SI <- 1 - exp(-beta * I / N * dt)   p_IR <- 1 - exp(-gamma * dt)   beta <- parameter(differentiate = TRUE)   gamma <- parameter(differentiate = TRUE)   I0 <- parameter()   N <- 1000    # Comparison to data   cases <- data()   cases ~ Poisson(incidence) }, quiet = TRUE) unfilter <- dust_unfilter_create(sir(), 0, data) dust_likelihood_run(unfilter, pars, adjoint = TRUE) #> [1] -543.8531 dust_likelihood_last_gradient(unfilter) #> [1] -6187.984  4780.146 likelihood <- dust_likelihood_monty(unfilter, sir_packer) likelihood #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'beta' and 'gamma' #> ℹ This model: #> • can compute gradients #> ℹ See `?monty_model()` for more information monty_model_density(likelihood, c(0.2, 0.1)) #> [1] -375.0398 monty_model_gradient(likelihood, c(0.2, 0.1)) #> [1]  5093.697 -2890.574 posterior <- likelihood + prior posterior #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'beta' and 'gamma' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"running-multiple-parameter-sets-at-once","dir":"Articles","previous_headings":"","what":"Running multiple parameter sets at once","title":"Fitting odin2 models to data","text":"can efficiently run multiple parameter sets ; parallelised possible enabled. two cases might useful: support things like parallel tempering use system, data multiple parameter sets compute likelihood multiple parameter sets simultaneously compute likelihoods across multiple “groups” combination, system, different data multiple parameter sets.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"for-dust2-systems","dir":"Articles","previous_headings":"Running multiple parameter sets at once","what":"For dust2 systems","title":"Fitting odin2 models to data","text":"initialising dust system, : pass (typically unnamed) list parameters, element different set parameters system pass n_groups argument indicating many groups wish initialise simple case two parameter sets differ beta, run 20 particles: dimensions y now representing 4 state variables 20 particles 2 parameter groups 101 times Consider just incidence :","code":"pars2 <- list(list(beta = 0.3, gamma = 0.1, I0 = 5),               list(beta = 0.2, gamma = 0.1, I0 = 5)) sys <- dust_system_create(sir(), pars2, n_particles = 20, n_groups = 2,                                  dt = 0.25) dust_system_set_state_initial(sys) time <- 0:100 y <- dust_system_simulate(sys, time) dim(y) #> [1]   4  20   2 101 matplot(time, t(y[4, , 1, ]), type = \"l\", lty = 1, col = \"#ff000055\",         xlab = \"Time (days)\", ylab = \"Cases\", las = 1) matlines(time, t(y[4, , 2, ]), type = \"l\", lty = 1, col = \"#0000ff55\") points(cases ~ time, data, pch = 19)"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"for-dust2-filtersunfilters","dir":"Articles","previous_headings":"Running multiple parameter sets at once","what":"For dust2 filters/unfilters","title":"Fitting odin2 models to data","text":"assume (require, really) parameter set associated different data set. may relax future, typical use case seen. need additional column called group addition time: (just synthetic data now, created duplicating perturbing original data). data grouped, don’t need tell dust_filter_create() two groups, though can pass n_groups = 2 want, validate really exactly two groups data: passing parameters filter, now mirror format used dust_system_run(); list lists: now two likelihoods returned filter; one per group. deterministic unfilter process : however, gradient picked dimension: , first column gradient first parameter set, first row gradient beta parameter sets. Compare single parameter case:","code":"head(data2) #>   group cases time #> 1     1     3    1 #> 2     2     8    1 #> 3     1     2    2 #> 4     2     4    2 #> 5     1     2    3 #> 6     2     3    3 plot(cases ~ time, data2, subset = group == 2, pch = 19, col = \"red\",      xlab = \"Time (days)\", ylab = \"Cases\") points(cases ~ time, data2, subset = group == 1, pch = 19, col = \"blue\") filter2 <- dust_filter_create(sir(), 0, data2, n_particles = 200) dust_likelihood_run(filter2, pars2) #> [1] -276.3184 -370.0171 unfilter2 <- dust_unfilter_create(sir(), 0, data2) dust_likelihood_run(unfilter2, pars2) #> [1] -543.8531 -609.5479 dust_likelihood_last_gradient(unfilter2) #>           [,1]      [,2] #> [1,] -6187.984  9175.668 #> [2,]  4780.146 -6740.108 dust_likelihood_run(unfilter, pars2[[1]]) #> [1] -543.8531 dust_likelihood_last_gradient(unfilter) #> [1] -6187.984  4780.146"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"for-monty-models","dir":"Articles","previous_headings":"Running multiple parameter sets at once","what":"For monty models","title":"Fitting odin2 models to data","text":"supported mode combined likelihood case, requires slightly set . match monty interface, name groups; now data groups b: , use monty_packer_grouped object rather packer, represent grouped structure. , create packer two groups two parameters (beta gamma), indicating gamma shared groups using fixed I0 5 across groups: suitable starting point packer might Now, can build likelihood:","code":"data2$group <- letters[data2$group] head(data2) #>   group cases time #> 1     a     3    1 #> 2     b     8    1 #> 3     a     2    2 #> 4     b     4    2 #> 5     a     2    3 #> 6     b     3    3 filter2 <- dust_filter_create(sir(), 0, data2, n_particles = 200) packer2 <- monty_packer_grouped(groups = c(\"a\", \"b\"),                                        scalar = c(\"beta\", \"gamma\"),                                        shared = \"gamma\",                                        fixed = list(I0 = 5)) packer2 #>  #> ── <monty_packer_grouped> ────────────────────────────────────────────────────── #> ℹ Packing 3 values: 'gamma', 'beta<a>', and 'beta<b>' #> ℹ Packing 2 groups: 'a' and 'b' #> ℹ Use '$pack()' to convert from a list to a vector #> ℹ Use '$unpack()' to convert from a vector to a list #> ℹ See `?monty_packer_grouped()` for more information p <- c(0.1, 0.2, 0.25) packer2$unpack(p) #> $a #> $a$beta #> [1] 0.2 #>  #> $a$gamma #> [1] 0.1 #>  #> $a$I0 #> [1] 5 #>  #>  #> $b #> $b$beta #> [1] 0.25 #>  #> $b$gamma #> [1] 0.1 #>  #> $b$I0 #> [1] 5 likelihood2 <- dust_likelihood_monty(filter2, packer2) monty_model_density(likelihood2, p) #> [1] -611.4109"},{"path":"https://mrc-ide.github.io/odin2/articles/fitting.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Fitting odin2 models to data","text":"vignette can skim surface, organised around features odin . machinery running models comes dust2 performing inference monty adding documentation packages covers details use.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"general-syntax","dir":"Articles","previous_headings":"","what":"General syntax","title":"Supported Functions","text":"odin “Domain Specific Language”; mini-language solves specific problem; case representing systems difference differential equations. syntactically R (.e., can parsed R’s parser) R. subset expressions syntax supported. Every line odin code must assignment relationship (minor exceptions ). assignment looks like relationship looks like b entry data (introduced data()), Distribution monty distribution function (see ), ... arguments function, might come data model variables. See vignette(\"fitting\") high-level introduction interface. odin2 supports many functions ’d expect see constructing dynamical models. include common mathematical operations quite obscure. support stochastic models comparison data comes monty.","code":"a <- expression b ~ Distribution(...)"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"variables","dir":"Articles","previous_headings":"","what":"Variables","title":"Supported Functions","text":"Conceptually, system entirely determined variables; state system. continuous time (ODE) models, equations time derivatives , represented deriv() left-hand-side assignment discrete time models, equations update() expressions , describing recurrence relation. Practically, actually determine variables system based presence initial() call left hand side, present continuous-time discrete-time systems. simplest ODE system might : describes sort logarithmic growth x. Similarly, trivial discrete-time system might describes counter.","code":"deriv(x) <- 1 / x initial(x) <- 1 update(x) <- x + 1 initial(x) <- 0"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"continuous-time-models","dir":"Articles","previous_headings":"Variables","what":"Continuous time models","title":"Supported Functions","text":"two special considerations ODE models. First, allow additional “variables” output; quantities derivatives computed true variables quantities model, considered state purposes input output. can specify output writing: define new variable y takes value x * 2. passing state system y included even though computable x. Alternatively, y something already using within model can write: may want use inspect intermediates ODE model, reduce amount state need save simulate etc (example may want output sum disaggregated set variables actually derivatives). Second, system delays, implicit state history delays. Delays start life empty filled system runs. means continuing delayed system starting delayed system particular point space/time, provide tools working future versions.","code":"output(y) <- x * 2 output(y) <- TRUE"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"basic-operations","dir":"Articles","previous_headings":"","what":"Basic operations","title":"Supported Functions","text":"+ – Plus: infix (+ b) prefix (+) versions supported (e.g., 1 + 2 → 3) - – Minus: infix (- b) prefix (-) versions supported (e.g., 10 - 1 → 9) * – Multiply: Multiply two numbers together (e.g., 2 * 6 → 12) / – Divide: Divide two numbers (e.g., 12 / 6 → 2) ^ – Power: Raise first number power second. Either number may floating point number (e.g., 2.3 ^ 1.2 → 2.716898) ( – Parenthesis: Group expressions together (e.g., (1 + 5) * 2 → 12)","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"conditionals","dir":"Articles","previous_headings":"","what":"Conditionals","title":"Supported Functions","text":"can use conditionals inline expression, example result assigned 2 (works R normally !). general flow control supported, write:","code":"a <- if (9 > 10) 1 else 2 if (9 > 10) {   a <- 1 } else {   a <- 2 }"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"operators","dir":"Articles","previous_headings":"","what":"Operators","title":"Supported Functions","text":"number logical-returning operators exist, primarily support statement; usual comparison operators exist (though vectorised | &). > – Greater (e.g., 1 > 2 → FALSE) < – Less (e.g., 1 < 2 → TRUE) >= – Greater equal (e.g., 1 >= 2 → FALSE) <= – Less equal (e.g., 1 <= 2 → TRUE) == – exactly equal (e.g., 1 == 1 → TRUE) != – exactly equal (e.g., 1 != 2 → TRUE) && – Boolean (e.g., (1 == 1) && (2 > 1) → TRUE) || – Boolean (e.g., (1 == 1) && (2 > 1) → TRUE) wary strict equality == != numbers may floating point numbers, surprising properties uninitiated, example","code":"sqrt(3)^2 == 3 ## [1] FALSE"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"mathematical-functions-and-constants","dir":"Articles","previous_headings":"","what":"Mathematical functions and constants","title":"Supported Functions","text":"%% – Modulo: Finds remainder division one number another (e.g., 123 %% 100 → 23) %/% – Integer divide: Different floating point division, effectively full number times one number divides another (e.g., 20 %/% 7 → 2) abs – Absolute value (e.g., abs(-1) → 1) sign – Sign function: Returns sign argument either -1, 0 1, may useful multiplying another argument (e.g., sign(-100) → -1) round – Round number (e.g., round(1.23) → 1; round(1.23, 1) → 1.2) floor – Floor number: Largest integer greater provided number (e.g., floor(6.5) → 6) ceiling – Ceiling number: Smallest integer less provided number (e.g., ceiling(6.5) → 7) trunc – Truncate number: Round number towards zero max – Maximum: Returns maximum two numbers (e.g., max(2, 6) → 6) min – Minimum (e.g., min(2, 6) → 2) exp – Exponential function (e.g., exp(1) → 2.718282) expm1 – Computes exp(x) - 1 accurately small |x| (e.g., exp(1) → 1.718282) log – Logarithmic function base e (e.g., log(1) → 0) log2 – Logarithmic function base 2 (e.g., log2(1024) → 10) log10 – Logarithmic function base 10 (e.g., log10(1000) → 3) log1p – Computes log(x + 1) accurately small |x| (e.g., log1p(1) → 0.6931472) sqrt – Square root function (e.g., sqrt(4) → 2) beta – Beta function (e.g., beta(3, 5) → 0.00952381) lbeta – Log beta function (e.g., lbeta(3, 5) → -4.65396) choose – Binomial coefficients (e.g., choose(60, 3) → 34220) lchoose – Log binomial coefficients (e.g., choose(60, 3) → 10.44057) gamma – Gamma function (e.g., gamma(10) → 362880) lgamma – Log gamma function (e.g., lgamma(10) → 12.80183) exact behaviour %% %/% floating point numbers negative numbers complicated - please see ?Arithmetic. rules operators odin try follow R closely possible. constant pi can used, along usual trig functions: cos – Cosine function sin – Sine function tan – Tangent function acos – Arc-cosine function asin – Arc-sin function atan – Arc-tangent function atan2 – Two-argument arc-tangent function cosh – Hyperbolic cosine function sinh – Hyperbolic sine function tanh – Hyperbolic tangent function acosh – Hyperbolic arc-cosine function asinh – Hyperbolic arc-sine function atanh – Hyperbolic arc-tangent function","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"arrays","dir":"Articles","previous_headings":"","what":"Arrays","title":"Supported Functions","text":"Use arrays implies “-loop” generated code. example, might write vectorised version logistic map : expand code equivalent loop extent (entire range y) determined left hand side expression (y[]). enables use right hand side index loop progresses. indices right hand side can , j, k, l, i5, i6, i7 i8 (odin supports arrays 8 dimensions: let us know need reason). Arrays can one dimension, example expression: involves loops two dimensions loop whole extent ay matrix. roughly equivalent : Note y accessed using j, even though vector. loop extents generated left hand side.","code":"update(y[]) <- r[i] * y[i] * (1 - y[i]) for (i in 1:length(y)) {   y_next[i] <- r[i] * y[i] * (1 - y[i]) } ay[, ] <- a[i, j] * y[j] for (i in 1:nrow(ay)) {   for (j in 1:ncol(ay)) {      ay[i, j] <- a[i, j] * y[j]   } }"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"array-size","dir":"Articles","previous_headings":"Arrays","what":"Array size","title":"Supported Functions","text":"Every array variable requires dim() assignment. example, examples might : y defined 1-dimensional array length 10 ay matrix (2-dimensional array) nr rows nc columns. extents arrays must determined first system initialisation, checked parse. different arrays dimensions, can also use dim() right-hand side, copy array set dimensions elsewhere. example:- can also combine arrays left-hand side group arrays dimensions together. 5 arrays dimensions:-","code":"dim(y) <- 10 dim(ay) <- c(nr, nc) dim(x1) <- c(5, 3, 2) dim(x2) <- dim(x1) dim(x3) <- dim(x1) dim(x, y) <- c(5, 3, 2) dim(a, b, c) <- dim(x)"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"special-functions-for-arrays","dir":"Articles","previous_headings":"Arrays","what":"Special functions for arrays","title":"Supported Functions","text":"provide several functions retrieving dimensions array length – Length: get full length array. single dimensional array obvious, multidimensional array product dimensions. nrow – Number rows: number rows matrix number elements first dimension multidimensional array ncol – Number columns: number columns matrix number elements second dimension multidimensional array currently offer function accessing size higher dimensions, please let us know issue (see vignette(\"migrating\")) Frequently, want take sum array, part array, using sum. sum elements array, use sum() name array like sum : m matrix can compute sums second column writing: partial sum approach frequently used within implicit loops: can use approach compute matrix-vector product (Ax)\\mathbf(Ax):","code":"dim(x) <- 10 x_tot <- sum(x) m1_tot <- sum(m[, 2]) m_col_totals[] <- sum(m[, i]) ax_tmp[, ] <- a[i, j] * x[j] ax[] <- sum(a[, i])"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"distribution-functions","dir":"Articles","previous_headings":"","what":"Distribution functions","title":"Supported Functions","text":"support distribution functions two places: First, discrete-time models support sampling distribution time step. example: assign draw standard normal distribution. use functions continuous time models. sample stochastic functions continuous time (ODE) model. Second, comparison data, example: add log likelihood term looking log density data element standard normal distribution. form can used discrete-time continuous-time models. information, see vignette(\"fitting\"). distributions several versions; distinguished arguments functions. example: draw Gamma distribution shape 2 rate 0.1, draw Gamma distribution shape 2 scale 10. currently supported distributions (alphabetically): Beta – beta distribution parameters b (vs rbeta’s shape1 shape2) size, prob (mean probability success), rho (dispersion parameter) (default) size, , b Binomial – binomial distribution parameters size prob Cauchy – Cauchy distribution parameters location scale. Note Cauchy distribution defined mean, can run model Cauchy draws deterministic mode. rate (default); parameterisation rexp mean inverse rate. NOTE: may change scale soon shape, rate (default) shape, scale Hypergeometric – hypergeometric distribution parameters m (number white balls), n (number black balls), k (number samples), return number white balls. may support alternative parametrisations distribution future (version parametrisation rhyper) LogNormal – log-normal distribution parameters meanlog sdlog, mean standard deviation distribution log scale size, prob (default) size, mu (mean) Normal – normal distribution parameters mean, sd Poisson – Poisson distribution parameter lambda (mean) TruncatedNormal – truncated normal distribution parameters mean, sd, min max. one-sided truncated normal distribution, can set min = -Inf max = Inf. Note mean sd mean standard deviation truncated normal distribution, mean standard deviation normal distribution truncated. Uniform – uniform distribution parameters min max Weibull – Weibull distribution parameters shape scale pi0, size, prob (default) pi0, size, mu (mean negative binomial part distribution - note mean zero-inflated negative binomial distribution (1 - pi0) * mu). ZIPoisson – zero-inflated Poisson distribution. parameters pi0 (probability excess zeros) lambda (mean Poisson part distribution). probability pi0 0 drawn, otherwise draw corresponding standard Poisson distribution mean lambda (may also result 0 drawn). Note mean distribution (1 - pi0) * lambda. future, plan support additional distributions, please let us know missing need. support functions comes monty link docs package exist additional details. plan explicitly support multinomial distribution future, time can implemented loop nested binomial distributions. instance want draw y multinomial distribution parameters size prob (prob vector length y) can implemented want include likelihood term z vector data (see guidance vectors data) multinomial distribution probability vector prob, can implemented ","code":"a <- Normal(0, 1) a ~ Normal(0, 1) a <- Gamma(2, 0.1) a <- Gamma(shape = 2, rate = 0.1) a <- Gamma(2, scale = 10) a <- Gamma(shape = 2, scale = 10) y[1] <- Binomial(size, prob[1]) y[2:length(y)] <- Binomial(size - sum(y[1:(i - 1)]), prob[i] / sum(prob[i:length(y)])) z[1:(length(z) - 1)] ~ Binomial(sum(z[i:length(z)]), prob[i] / sum(prob[i:length(z)]))"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"semantics-of-random-number-draws","dir":"Articles","previous_headings":"Distribution functions","what":"Semantics of random number draws","title":"Supported Functions","text":"Stochastic functions called element array assigned , time. : x filled element different draw standard normal. contrast, : x vector every element , result single draw standard normal.","code":"x[] <- Normal(0, 1) a <- Normal(0, 1) x[] <- a"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"special-functions","dir":"Articles","previous_headings":"","what":"Special functions","title":"Supported Functions","text":"special odin functions may appear right hand side must function used expression.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"parameters","dir":"Articles","previous_headings":"Special functions","what":"Parameters","title":"Supported Functions","text":"function parameter() introduces “parameter”; something initialise system , update initialisation. primary mechanism controlling systems behave. parameter function accepts arguments: default: first argument, typically unnamed, holds default value none provided initialisation constant: Logical, indicating parameter changed initially set. must TRUE things leading array extents differentiate: Logical, indicating likelihood (comparison data) differentiated respect parameter. type: data type variable, string. Must one real (default), integer logical. rank: number dimensions parameter. used assigning dim() (see ) example: : interactions among differentiate argument combined constant type: parameter differentiable (differentiate = TRUE) may constant! parameter differentiable, default value constant TRUE, non-constant parameters must differentiable. Otherwise default value constant FALSE parameters type = \"real\" can used differentiate = TRUE parameter dimensions determined size data give , need write slightly specially: rank argument required otherwise information number dimensions ; saying rank = 2 specify matrix. might change interface future, implementation fairly closely matches odin1.","code":"a <- parameter() n <- parameter(12, constant = TRUE, type = \"integer\") a <- parameter() dim(a) <- parameter(rank = 2)"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"data","dir":"Articles","previous_headings":"Special functions","what":"Data","title":"Supported Functions","text":"model compares data (.e., uses ~) needs data. specified similarly parameter(), though present arguments supported. Unlike parameter(), series data elements, corresponding observation different point time time series. See vignettes(\"fitting\") details.","code":"d <- data()"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"interpolation","dir":"Articles","previous_headings":"Special functions","what":"Interpolation","title":"Supported Functions","text":"can create variables interpolate time. useful contexts, example: piecewise constant function represents level external factor smooth function represents environmental input Currently interpolation functions scalar valued meaning time single output produced. usage : time vector representing time values value vector representing series like interpolate, length time mode string, one constant, linear spline complete show usage interpolating functions vignette.","code":"interpolate(time, value, mode)"},{"path":"https://mrc-ide.github.io/odin2/articles/functions.html","id":"restricted-names","dir":"Articles","previous_headings":"","what":"Restricted names","title":"Supported Functions","text":"assign name reserved : C++ - includes useful words new switch C - largely subset C++’s words, also excludes restrict JavaScript - includes useful words default export words restricted odin : time, dt, parameter, data, interpolate, delay, initial, deriv, update, output, dim, config, state, state_next, state_deriv, shared, internal, pi. may reduce list future. addition, odin restricts prefixes; name start odin_, dim_, interpolate_, delay_ adjoint_.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"new-features","dir":"Articles","previous_headings":"","what":"New features","title":"Migrating from odin 1.x.x","text":"features present versions odin.dust many derive underlying support dust2. Comparison data likelihood support (introduced odin.dust) Automatic differentiation efficient setting subset parameters likely use fitting (use constant argument parameter()) Multiple parameter sets (introduced odin.dust expanded ) Run multiple copies system parallel (introduced odin.dust) Built-support periodic variable resetting (e.g., computing daily incidence) Better (hope) error messages Better debugging tools (see vignette(\"debugging\")) Compile-time bounds checking arrays, preventing many crashes","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"planned","dir":"Articles","previous_headings":"New features","what":"Planned","title":"Migrating from odin 1.x.x","text":"Optional array bounds checking, runtime (latter case performance penalty enabled).","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"hoped","dir":"Articles","previous_headings":"New features","what":"Hoped","title":"Migrating from odin 1.x.x","text":"Support multinomial samples vector-valued functions","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"missing-features","dir":"Articles","previous_headings":"","what":"Missing features","title":"Migrating from odin 1.x.x","text":"Things plan implementing: Compile-time parameter substitution (mrc-5575) Compilation JavaScript Compilation GPU Things plan drop version Many details config() options Note errors still caught odin errors, invalid odin code accepted generate C++ code fails compile. Please send us code causes happen.","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"user-becomes-parameter","dir":"Articles","previous_headings":"Changes in syntax","what":"user() becomes parameter()","title":"Migrating from odin 1.x.x","text":"might largest user-visible change, can automatically migrated. Previously, support parameters might write says user-supplied parameter default value 4. cases now simply becomes integer argument accepted user now changed: user(integer = TRUE) becomes parameter(type = \"integer\") user(integer = FALSE) becomes parameter(type = \"real\") translation can done automatically cases, done (warning) default possible. update code suggested fix, however, translation removed future version.","code":"a <- user(4) a <- parameter(4)"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"compare-keyword-is-now-removed-","dir":"Articles","previous_headings":"Changes in syntax","what":"Compare keyword is now removed.","title":"Migrating from odin 1.x.x","text":"comparisons compare keyword, ~ occur together. simplified, now written : reads : d normally distributed mean 0 standard deviation 1.","code":"compare(d) ~ Normal(0, 1) d ~ Normal(0, 1)"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"vector-parameters-assign-without-array-indices","dir":"Articles","previous_headings":"Changes in syntax","what":"Vector parameters assign without array indices","title":"Migrating from odin 1.x.x","text":"Previously, vector parameter write (though user(), previous section). However, array index really add anything already know many dimensions dim call. now write makes clearer assigned parameter call.","code":"a[] <- parameter() dim(a) <- 10 a <- parameter() dim(a) <- 10"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"vectormatrixarray-parameters-whose-size-is-determined-by-input-require-rank-argument","dir":"Articles","previous_headings":"Changes in syntax","what":"Vector/matrix/array parameters whose size is determined by input require rank argument","title":"Migrating from odin 1.x.x","text":"mouthful. Previously might written means “matrix whose dimensions determined input given initialisation”. previous change first line changes means longer know two dimensions. ’s ok ’ve moved responsibility dim() assignment line anyway (internally). now write conveys intent. may make slightly friendly future (see vignette(\"functions\")).","code":"a[, ] <- user() dim(a) <- user() a <- parameter() dim(a) <- parameter(rank = 2)"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"interpolate-results-assign-without-array-indices","dir":"Articles","previous_headings":"Changes in syntax","what":"Interpolate results assign without array indices","title":"Migrating from odin 1.x.x","text":"Previously, interpolate() call returned vector (higher-dimension array) write now drop [], parameter() case , replacing v , writing:","code":"v[] <- interpolate(a, b, \"constant\") v <- interpolate(a, b, \"constant\")"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"discrete-time-models-have-a-more-solid-time-basis","dir":"Articles","previous_headings":"Changes in syntax","what":"Discrete-time models have a more solid time basis","title":"Migrating from odin 1.x.x","text":"Previously, discrete time models used step count steps forward unsigned integers, usually zero. Many models added parameter (constant) dt representing timestep variable time represented time real-valued number. example might dt 0.25 model stops times [0, 0.25, 0.5, 0.75, 1] steps [0, 1, 2, 3, 4]. formalise approach now discrete time systems explicitly terms time basis ODE models (, real valued time axis). initialise model pass dt, must even divisor 1 (0.5, 0.25, 0.2, etc). take steps size. wrinkle (least now) model return control back , state back , integer-valued times. may relax future allow returning time value multiple dt. cause issues using old code, cover .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"assignments-to-dt","dir":"Articles","previous_headings":"Changes in syntax > Discrete-time models have a more solid time basis","what":"Assignments to dt","title":"Migrating from odin 1.x.x","text":"may models assign dt, either directly parameter. can longer dt provided dust (see dust2::dust_system_create()). can automatically remove (warning) cases.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"assignments-to-time","dir":"Articles","previous_headings":"Changes in syntax > Discrete-time models have a more solid time basis","what":"Assignments to time","title":"Migrating from odin 1.x.x","text":"Conventionally, many models write linear transformation time dust2 now . can remove statements model work intended.","code":"time <- step * dt"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"use-of-step","dir":"Articles","previous_headings":"Changes in syntax > Discrete-time models have a more solid time basis","what":"Use of step","title":"Migrating from odin 1.x.x","text":"uses step problematic need manual fixing. try accumulate migration strategies , please let us know anything listed. Access “interpolated” values grid: sircovid used step array index, order support time-varying inputs (e.g., vaccine allocation schedules, rates contact). longer supported () dt changed separately inputs. Instead use odin’s interpolation functions. Periodic resetting: may written: quantity took different values every freq steps, freq usually 1/dt m/dt m integer. rewrite use time:","code":"a <- if (step %% freq == 0) b else c a <- if (time * dt / m == 0) b else c"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"the-name-of-the-time-variable-in-continuous-time-models-has-changed","dir":"Articles","previous_headings":"Changes in syntax","what":"The name of the time variable in continuous time models has changed","title":"Migrating from odin 1.x.x","text":"Previously, time t moved time little explicit. can automatically migrate code many cases, unless defined variable time already.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"random-number-function-calls-have-changed","dir":"Articles","previous_headings":"Changes in syntax","what":"Random number function calls have changed","title":"Migrating from odin 1.x.x","text":"Previously used names R’s random-number-drawing functions, example rbinom drawing binomial distribution. changed use distribution name instead. motivating reason change odin might write writing R write first argument number draws distribution question. departure arguments feels needlessly confusing! using odin without odin.dust compile call one R’s underlying random number functions connection reasonable version 2 use monty’s parallelisable random number distributions. mapping : rbeta() Beta rbinom() Binomial rcauchy() Cauchy rchisq() ChiSquared (unsupported now) rexp() Exponential rf() F (unsupported now) rgamma() Gamma rgeometric() Geometric (unsupported now) rhyper() Hypergeometric rlogis() Logistic (unsupported now) rlnorm() LogNormal rnbinom() NegativeBinomial rnorm() Normal rpois() Poisson rt() T (unsupported now) runif() Uniform rweibull() Weibull (implemented yet).","code":"rbinom(size, prob) rbinom(1, size, prob)"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"system-size-cannot-be-changed-after-creation","dir":"Articles","previous_headings":"Changes in syntax","what":"System size cannot be changed after creation","title":"Migrating from odin 1.x.x","text":"limitation comes implementation dust2 possible relax settings. However, fairly important efficiently running system within pMCMC context save state periodically. system parameter affects number state variables system (e.g., number age categories compartment stratified ), may change initialisation. prevented parser arrays implemented.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"changes-in-the-way-arrays-are-handled","dir":"Articles","previous_headings":"Changes in syntax","what":"Changes in the way arrays are handled","title":"Migrating from odin 1.x.x","text":"two-argument form dim() removed, believe used confusingly different R. Previously write dim(x, 3) get length third dimension x; longer supported. Please let us know problem.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"changes-to-how-delays-are-supported","dir":"Articles","previous_headings":"","what":"Changes to how delays are supported","title":"Migrating from odin 1.x.x","text":"support, degree, delay differential equations. work minor miracle, especially given solver use (dust2) extremely simple.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"delay-cannot-be-used-in-discrete-time-models","dir":"Articles","previous_headings":"Changes to how delays are supported","what":"delay() cannot be used in discrete time models","title":"Migrating from odin 1.x.x","text":"removed odin.dust limitation remains, least now. may enable later required, please let us know. reason change way delays handled continuous time fundamentally different discrete time (particularly stochastic expressions), good motivating reason develop .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"delay-results-assign-without-array-indices","dir":"Articles","previous_headings":"Changes to how delays are supported","what":"delay() results assign without array indices","title":"Migrating from odin 1.x.x","text":"Previously, delay() call returned vector (higher-dimension array) write now drop [], parameter() interpolate() cases , replacing v , writing:","code":"v[] <- delay(a, tau) v <- delay(a, tau)"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"the-first-argument-to-delay-must-be-the-name-of-an-equation","dir":"Articles","previous_headings":"Changes to how delays are supported","what":"The first argument to delay() must be the name of an equation","title":"Migrating from odin 1.x.x","text":"Previously, delay expression (e.g., x <- delay(+ b, 1)). simplicity implementation dropped require first argument symbol. might change later, current version makes syntax around handling delayed arrays little consistent (see ).","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"the-default-argument-to-delay-has-been-removed","dir":"Articles","previous_headings":"Changes to how delays are supported","what":"The ‘default’ argument to delay() has been removed","title":"Migrating from odin 1.x.x","text":"Previously, write provide default argument delayed value tau time elapsed. widely advertised used, removed.","code":"x <- delay(y, tau, default)"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"the-delay-time-must-be-constant","dir":"Articles","previous_headings":"Changes to how delays are supported","what":"The delay time must be constant","title":"Migrating from odin 1.x.x","text":"require delay time known first model initialisation updated subsequently (.e., numeric, literal value assigned symbol parameter constant = TRUE).","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"general-changes","dir":"Articles","previous_headings":"","what":"General changes","title":"Migrating from odin 1.x.x","text":"package replaces odin.dust eventually replace odin (, ’ll copy entire odin2 code odin become version 2.0.0 package). relationship packages changed. Previously mcstate “knew” dust models use odin.dust practically use statistical machinery mcstate. ’ve changed around now, odin2 “knows” monty can create systems work well monty. now depend monty, odin2 installed can start working towards fitting models immediately.","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"much-slower-compilation-time","dir":"Articles","previous_headings":"Known limitations","what":"Much slower compilation time","title":"Migrating from odin 1.x.x","text":"now compile C++ via dust2, compilation times massively increased. Previously, compilation simple model took less second, now take 6 seconds . can alleviate degree development specifying debug = TRUE compiling, reduces 3 seconds. times workstation expect relative differences hold (’re probably 10x slower previously can “” 5x slower turn optimisation). previously using odin.dust notice little change .","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"loss-of-features-from-odin-1-x","dir":"Articles","previous_headings":"Known limitations","what":"Loss of features from odin 1.x","title":"Migrating from odin 1.x.x","text":"original odin 1.x features lost: discrete-time systems: may use output(); see workarounds reasons change. Delays supported; never worked well, particularly stochastic systems.","code":""},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"updating-old-code","dir":"Articles","previous_headings":"","what":"Updating old code","title":"Migrating from odin 1.x.x","text":"compile odin code contains changes , try update code new version keep going: model contains two issues can easily rewritten; solution rewriting printed screen model compiled rewritten . everything can rewritten, especially changes involving step: case, odin errors tries indicate work (directs document!) code saved file, can use odin_migrate migrate code old syntax new; preserve comments formatting except code rewritten fairly unintrusive. example, path (temporary file vignette) saved code : can migrate -place : now code contains:","code":"gen <- odin2::odin({   initial(x) <- 1   deriv(x) <- x + a / t   a <- user(2) }) #> Warning in odin2::odin({: Found 2 compatibility issues #> Replace calls to 'user()' with 'parameter()' #> ✖ a <- user(2) #> ✔ a <- parameter(2) #> Use 'time' and not 't' to refer to time #> ✖ deriv(x) <- x + a/t #> ✔ deriv(x) <- x + a/time gen <- odin2::odin({   initial(x) <- 1   update(x) <- x + a / step   a <- user(2) }) #> Error in `odin2::odin()`: #> ! Use of 'step' is no longer allowed #> ℹ Previously, discrete-time models used 'step' as a measure of time, but we #>   have removed this in odin2 #> ℹ Please see `vignette(odin2::migrating)` for guidance #> → Context: #> update(x) <- x + a/step #> ℹ For more information, run `odin2::odin_error_explain(\"E1050\")` initial(x) <- 1 deriv(x) <- x + a / t a <- user(2) odin_migrate(path, path) #> ℹ Migrating 2 statements #> ✔ Wrote '/tmp/RtmpfOzvu1/file206363557f62.R' initial(x) <- 1 deriv(x) <- x + a/time a <- parameter(2)"},{"path":"https://mrc-ide.github.io/odin2/articles/migrating.html","id":"avoiding-output-in-discrete-time-systems","dir":"Articles","previous_headings":"Updating old code","what":"Avoiding output() in discrete-time systems","title":"Migrating from odin 1.x.x","text":"odin 1.x code, may system uses output() discrete-time; fail compile. Previously, worked create system one input variable (system depends) one output variable (entirely derived inputs), producing output like (comes odin.dust migration guide) important ODE models often things want observe functions system can’t write equations describe terms rates — sum set variables example. Note x used calculation really x end time step, x inputs, means output column satisfies y == x / 2. turns hard get right reason , involved fairly unpleasant bookkeeping dde (package used drive systems); effect run additional time step end run order compute output variables, inefficient dust’s use within particle filter, poorly behaved anything used random numbers. Additionally, great need output discrete time models, can treat y just another variable. also allows us explicit within time step output computed: can run : , variable x updated original output. variable y1 column computes relationship x beginning time step, y2 equivalent previous output command requires storing value become updated x order use value update x y2.","code":"odin({   initial(x) <- 1   update(x) <- x + 1   output(y) <- x / 2 }) #> Error in `odin()`: #> ! Can't use 'output()' in discrete time systems #> ℹ You should be able to do what you need using 'update()'. If you are migrating #>   from odin 1.x.x, you might find some advice in `vignette(odin2::migrating)` #> → Context: #> output(y) <- x/2 #> ℹ For more information, run `odin2::odin_error_explain(\"E2020\")` #>      step x   y #> [1,]    0 1 0.5 #> [2,]    1 2 1.0 #> [3,]    2 3 1.5 #> [4,]    3 4 2.0 #> [5,]    4 5 2.5 #> [6,]    5 6 3.0 gen <- odin({   initial(x) <- 1   new_x <- x + 1   update(x) <- new_x   initial(y1) <- 0   initial(y2) <- 0   update(y1) <- x / 2   update(y2) <- new_x / 2 }) sys <- dust_system_create(gen) y <- dust_system_set_state_initial(sys) y <- dust_system_simulate(sys, 0:5) dust_unpack_state(sys, y) #> $x #> [1] 1 2 3 4 5 6 #>  #> $y1 #> [1] 0.0 0.5 1.0 1.5 2.0 2.5 #>  #> $y2 #> [1] 0.0 1.0 1.5 2.0 2.5 3.0"},{"path":"https://mrc-ide.github.io/odin2/articles/odin2.html","id":"discrete-time-stochastic-sir-model","dir":"Articles","previous_headings":"","what":"Discrete time stochastic SIR model","title":"Getting started with odin2","text":"simple definition SIR model : dSdt=−βSINdIdt=βSIN−γIdRdt=γI\\begin{align*} \\frac{dS}{dt} &= -\\beta \\frac{SI}{N} \\\\ \\frac{dI}{dt} &= \\beta \\frac{SI}{N} - \\gamma \\\\ \\frac{dR}{dt} &= \\gamma \\\\ \\end{align*} SS number susceptibles, II number infected RR number recovered; total population size N=S++RN = S + + R constant. β\\beta infection rate, γ\\gamma recovery rate. Discretising model time steps width dtdt gives following update equations time step: St+1=St−nSIIt+1=+nSI−nIRRt+1=Rt+nIR\\begin{align*} S_{t+1} &= S_t - n_{SI} \\\\ I_{t+1} &= I_t + n_{SI} - n_{IR} \\\\ R_{t+1} &= R_t + n_{IR} \\end{align*} nSI∼Binomial(S,1−e−βIN⋅dt)nIR∼Binomial(,1−e−γ⋅dt)\\begin{align*} n_{SI} &\\sim \\mathrm{Binomial}(S, 1 - e^{-\\beta \\frac{}{N} \\cdot dt}) \\\\ n_{IR} &\\sim \\mathrm{Binomial}(, 1 - e^{-\\gamma \\cdot dt}) \\end{align*} system, stochastic compartmental model: step generates C++ code model compiles ; take seconds. system, can pass [dust2::dust_system_create] create start simulating . system defaults parameters (N, beta, gamma, I0) can initialise almost arguments: default system start time 0 dt = 1. can simulate 10 random epidemics starting initial conditions:  system stochastic, trajectory different.","code":"gen <- odin2::odin({   p_IR <- 1 - exp(-gamma * dt)   N <- parameter(1000)    p_SI <- 1 - exp(-(beta * I / N * dt))   n_SI <- Binomial(S, p_SI)   n_IR <- Binomial(I, p_IR)    update(S) <- S - n_SI   update(I) <- I + n_SI - n_IR   update(R) <- R + n_IR    initial(S) <- N - I0   initial(I) <- I0   initial(R) <- 0    beta <- parameter(0.2)   gamma <- parameter(0.1)   I0 <- parameter(10) }) #> ✔ Wrote 'DESCRIPTION' #> ✔ Wrote 'NAMESPACE' #> ✔ Wrote 'R/dust.R' #> ✔ Wrote 'src/dust.cpp' #> ✔ Wrote 'src/Makevars' #> ℹ 12 functions decorated with [[cpp11::register]] #> ✔ generated file cpp11.R #> ✔ generated file cpp11.cpp #> ℹ Re-compiling odin.system3c679b6a #> ── R CMD INSTALL ─────────────────────────────────────────────────────────────── #> * installing *source* package ‘odin.system3c679b6a’ ... #> ** this is package ‘odin.system3c679b6a’ version ‘0.0.1’ #> ** using staged installation #> ** libs #> using C++ compiler: ‘g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> g++ -std=gnu++17 -I\"/opt/R/4.5.1/lib/R/include\" -DNDEBUG  -I'/home/runner/work/_temp/Library/cpp11/include' -I'/home/runner/work/_temp/Library/dust2/include' -I'/home/runner/work/_temp/Library/monty/include' -I/usr/local/include   -DHAVE_INLINE -fopenmp  -fpic  -g -O2  -Wall -pedantic -fdiagnostics-color=always  -c cpp11.cpp -o cpp11.o #> g++ -std=gnu++17 -I\"/opt/R/4.5.1/lib/R/include\" -DNDEBUG  -I'/home/runner/work/_temp/Library/cpp11/include' -I'/home/runner/work/_temp/Library/dust2/include' -I'/home/runner/work/_temp/Library/monty/include' -I/usr/local/include   -DHAVE_INLINE -fopenmp  -fpic  -g -O2  -Wall -pedantic -fdiagnostics-color=always  -c dust.cpp -o dust.o #> g++ -std=gnu++17 -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o odin.system3c679b6a.so cpp11.o dust.o -fopenmp -L/opt/R/4.5.1/lib/R/lib -lR #> installing to /tmp/Rtmp7IUxzh/devtools_install_21536cc142ea/00LOCK-dust_2153122e8f43/00new/odin.system3c679b6a/libs #> ** checking absolute paths in shared objects and dynamic libraries #> * DONE (odin.system3c679b6a) #> ℹ Loading odin.system3c679b6a pars <- list(beta = 0.2, gamma = 0.1, I0 = 10, N = 1000) sys <- dust2::dust_system_create(gen(), pars, n_particles = 10) dust2::dust_system_set_state_initial(sys) time <- 0:100 y <- dust2::dust_system_simulate(sys, time) matplot(time, t(y[2, , ]), col = \"#00000055\", lty = 1, type = \"l\",         xlab = \"Time\", ylab = \"Number of infecteds\")"},{"path":"https://mrc-ide.github.io/odin2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rich FitzJohn. Author, maintainer. Wes Hinsley. Author. Thibaut Jombart. Contributor. Ed Knock. Contributor. Imperial College Science, Technology Medicine. Copyright holder.","code":""},{"path":"https://mrc-ide.github.io/odin2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FitzJohn R, Hinsley W (2025). odin2: Next generation odin. R package version 0.3.38, https://mrc-ide.github.io/odin2.","code":"@Manual{,   title = {odin2: Next generation odin},   author = {Rich FitzJohn and Wes Hinsley},   year = {2025},   note = {R package version 0.3.38},   url = {https://mrc-ide.github.io/odin2}, }"},{"path":"https://mrc-ide.github.io/odin2/index.html","id":"odin2-","dir":"","previous_headings":"","what":"Next generation odin","title":"Next generation odin","text":"odin2 implements high-level language describing implementing ordinary differential equations difference equations R. provides “domain specific language” (DSL) looks like R compiled directly C++, using dust2 solve system provide interface particle filters. can use monty fit models using MCMC. DSL declarative reflecting mathematical nature equations. includes support equations involve vectors, matrices higher dimensional arrays (8!), including high-level array indexing notation removes need explicit looping. Supports discrete-time (possibly stochastic) models, well continuous-time ODE models. Interpolation functions can used include time-varying quantities model (piecewise constant, linear spline interpolation supported). equations analysed compilation parts depend time included time-dependent calculations. Supports user-supplied parameters part system. Supports large number mathematical functions (see functions vignette complete list).","code":""},{"path":"https://mrc-ide.github.io/odin2/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Next generation odin","text":"best place start people probably odin & monty book walks odin context within wider set statistical packages. package also includes number vignettes documentation: See introductory vignette tutorial-style introduction odin2 tutorial-style guide using odin2 dust2 monty fit models data reference-style guide syntax supported functions used odin version 1 , see migration guide see changed. odin2 compiles dust2, see documentation particular list functions can use odin2 designed use monty, see documentation, especially fitting models data working random number generators stochastic models.","code":""},{"path":"https://mrc-ide.github.io/odin2/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Next generation odin","text":"package currently ready use adventurous users. eventually become odin replace version CRAN (.e., simply become version 2.0.0 odin, odin2 cease package name see). also replaces odin.dust. exists separately now facilitate development use alongside original odin. See list missing features version 1 odin using. next months expanding automatic differentiation support, generating code host languages improving ergonomics package.","code":""},{"path":"https://mrc-ide.github.io/odin2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Next generation odin","text":"Please install r-universe: prefer, can install GitHub remotes:","code":"install.packages(   \"odin2\",   repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) remotes::install_github(\"mrc-ide/odin2\", upgrade = FALSE)"},{"path":"https://mrc-ide.github.io/odin2/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Next generation odin","text":"MIT © Imperial College Science, Technology Medicine","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile an odin model — odin","title":"Compile an odin model — odin","text":"Compile odin model, yielding dust_system_generator object.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile an odin model — odin","text":"","code":"odin(   expr,   input_type = NULL,   quiet = NULL,   workdir = NULL,   debug = NULL,   skip_cache = FALSE,   compatibility = NULL,   check_bounds = NULL )"},{"path":"https://mrc-ide.github.io/odin2/reference/odin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile an odin model — odin","text":"expr Odin code path file (string), character vector code, expression (typically within braces {}). input_type optional string describing type input expr - must one file, text expression.  given, skips type detection logic odin throw error wrong type input given.  Using may beneficial programmatic environments. quiet Logical, indicating compilation messages pkgbuild displayed.  Error messages displayed compilation failure regardless value used. NULL given, take value DUST_QUIET set, FALSE otherwise. workdir Optional working directory use.  NULL, behaviour depends existence environment variable DUST_WORKDIR_ROOT.  unset use session-specific temporary directory (generated tempfile()).  DUST_WORKDIR_ROOT set, use stable generated filename within directory, allows different sessions effectively share cache.  pass directory name string, use directory write code, allows inspect generated code.  See vignette(\"details\") information. debug Passed pkgbuild::compile_dll, build debug library. NULL given, take value DUST_DEBUG set, FALSE otherwise. skip_cache Logical, indicating cache previously compiled systems skipped. TRUE system looked cache, added cache compilation. compatibility Compatibility mode use.  Valid options \"warning\", updates code can fixed, warnings, \"error\", error.  option \"silent\" silently rewrite code, recommended general use eventually compatibility mode removed (option primarily intended comparing output odin1 odin2 models old code).  default, NULL, currently corresponds warning. check_bounds Control static array bounds checking. enabled default, prone false positives, erroring read write appears bounds actually ok.  argument exists allow disable check compile model anyway.  Future versions may allow specific lines ignored, provide finer control allow use bits checks actually helpful.  can also pass TRUE mean \"error\" FALSE mean \"disabled\".","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile an odin model — odin","text":"dust_system_generator object, suitable using dust functions (starting dust2::dust_system_create)","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile an odin model — odin","text":"","code":"if (FALSE) { # interactive() # A random walk: gen <- odin({   initial(x) <- 0   update(x) <- Normal(x, 1) })  sys <- dust2::dust_system_create(gen, list(), n_particles = 10) y <- dust2::dust_system_simulate(sys, 0:100) matplot(t(y[1, , ]), type = \"l\", lty = 1, xlab = \"Time\", ylab = \"Value\") }"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_error_explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain an odin error — odin_error_explain","title":"Explain an odin error — odin_error_explain","text":"Explain error codes produced odin.  odin fails parse code (e.g., via odin() odin_validate()) return error code.  can use odin_error_explain get information code.  default print explanation screen, can control behaviour via argument.  error codes can found vignette(\"errors\").","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_error_explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain an odin error — odin_error_explain","text":"","code":"odin_error_explain(code, how = \"pretty\")"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_error_explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain an odin error — odin_error_explain","text":"code error code, string, form Exxxx (capital \"E\" followed four numbers) explain error. Options pretty (render pretty text console), plain (display plain text console) link (browse online help).","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_error_explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain an odin error — odin_error_explain","text":"Nothing, called side effect ","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_error_explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain an odin error — odin_error_explain","text":"","code":"odin_error_explain(\"E1006\") #>  #> ── E1006 ─────────────────────────────────────────────────────────────────────── #> Invalid call to the `parameter()` function, used on the rhs of an assignment. #> If this error is thrown then we have failed to parse the arguments of your call #> to `parameter`.  The full prototype of `parameter()` is: #>  #>     parameter(default = NULL, constant = NULL, differentiate = FALSE) #>  #> We will fail to parse your call if: #>  #> • You provide more than three arguments #> • You provide named arguments that do not match the three above (`default`, #> `constant` or `differentiate`) #>  #> Example: #>  #>     x <- parameter(value = 10) #>  #> This fails because `value` is not a valid keyword argument to `parameter`. #>"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_migrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Migrate odin code — odin_migrate","title":"Migrate odin code — odin_migrate","text":"Migrate odin code.  function takes path existing odin code writes migrated code new file.  possible code migrated, case written contents identical read.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_migrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Migrate odin code — odin_migrate","text":"","code":"odin_migrate(path, dest)"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_migrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Migrate odin code — odin_migrate","text":"path Path odin code read dest Path destination code.  can dest, case file overwritten.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_migrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Migrate odin code — odin_migrate","text":"Nothing; called side effects ","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_migrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Migrate odin code — odin_migrate","text":"","code":"# A file 'path' contains odin code using old features: writeLines(readLines(path)) #> initial(x) <- 0 #> deriv(x) <- x * r #> r <- user()  # Migrate this file in place (by overwriting) odin_migrate(path, path) #> ℹ Migrating 1 statement #> ✔ Wrote '/tmp/RtmpOTkvAB/file1c9670db497c.R'  writeLines(readLines(path)) #> initial(x) <- 0 #> deriv(x) <- x * r #> r <- parameter()"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Update odin code in package — odin_package","title":"Update odin code in package — odin_package","text":"Update generated code package uses odin dust provide model. generate new dust code inst/dust generate full model src, R interface R/dust.R, along cpp11 attributes needed use model.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update odin code in package — odin_package","text":"","code":"odin_package(path, quiet = FALSE, compatibility = NULL, check_bounds = NULL)"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update odin code in package — odin_package","text":"path Path package root (directory contains DESCRIPTION), path within package. quiet Logical, indicating compilation messages pkgbuild displayed.  Error messages displayed compilation failure regardless value used. NULL given, take value DUST_QUIET set, FALSE otherwise. compatibility Compatibility mode use.  Valid options \"warning\", updates code can fixed, warnings, \"error\", error.  option \"silent\" silently rewrite code, recommended general use eventually compatibility mode removed (option primarily intended comparing output odin1 odin2 models old code).  default, NULL, currently corresponds warning. check_bounds Control static array bounds checking. enabled default, prone false positives, erroring read write appears bounds actually ok.  argument exists allow disable check compile model anyway.  Future versions may allow specific lines ignored, provide finer control allow use bits checks actually helpful.  can also pass TRUE mean \"error\" FALSE mean \"disabled\".","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update odin code in package — odin_package","text":"Invisibly, path package.  However, function typically called side effect updating files inst/dust src within package changed odin code inst/odin.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update odin code in package — odin_package","text":"function powered dust2::dust_package, pre-requisites apply : DESCRIPTION file: dust2 must Imports cpp11, dust2 monty must LinkingTo NAMESPACE file: must suitable useDynLib() call .registration = TRUE satisfy requirements, dust2::dust_package fail message indicating actions take.  set , generally things keep working. want packages build GitHub actions, installable via remotes::install_github add DESCRIPTION:   Note need include odin2 dependency.","code":"Remotes: mrc-ide/dust2, mrc-ide/monty"},{"path":[]},{"path":"https://mrc-ide.github.io/odin2/reference/odin_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update odin code in package — odin_package","text":"","code":"# An example package structure fs::dir_tree(path) #> /tmp/RtmpOTkvAB/file1c965344430c #> ├── DESCRIPTION #> ├── NAMESPACE #> └── inst #>     └── odin #>         └── sir.R  # Generate odin code: odin_package(path) #> ℹ Found 1 odin code file in 'inst/odin' #> ✔ Wrote 'inst/dust/sir.cpp' #> ℹ Working in package 'example' at '/tmp/RtmpOTkvAB/file1c965344430c' #> ℹ Found 1 system #> ✔ Wrote 'src/sir.cpp' #> ✔ Wrote 'R/dust.R' #> ✔ Wrote 'src/Makevars' #> ℹ 12 functions decorated with [[cpp11::register]] #> ✔ generated file cpp11.R #> ✔ generated file cpp11.cpp  # Resulting files: fs::dir_tree(path) #> /tmp/RtmpOTkvAB/file1c965344430c #> ├── DESCRIPTION #> ├── NAMESPACE #> ├── R #> │   ├── cpp11.R #> │   └── dust.R #> ├── inst #> │   ├── dust #> │   │   └── sir.cpp #> │   └── odin #> │       └── sir.R #> └── src #>     ├── Makevars #>     ├── cpp11.cpp #>     └── sir.cpp"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show generated odin code — odin_show","title":"Show generated odin code — odin_show","text":"Show generated code compiling odin model.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show generated odin code — odin_show","text":"","code":"odin_show(   expr,   input_type = NULL,   compatibility = NULL,   check_bounds = NULL,   what = NULL )"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show generated odin code — odin_show","text":"expr Odin code path file (string), character vector code, expression (typically within braces {}). input_type optional string describing type input expr - must one file, text expression.  given, skips type detection logic odin throw error wrong type input given.  Using may beneficial programmatic environments. compatibility Compatibility mode use.  Valid options \"warning\", updates code can fixed, warnings, \"error\", error.  option \"silent\" silently rewrite code, recommended general use eventually compatibility mode removed (option primarily intended comparing output odin1 odin2 models old code).  default, NULL, currently corresponds warning. check_bounds Control static array bounds checking. enabled default, prone false positives, erroring read write appears bounds actually ok.  argument exists allow disable check compile model anyway.  Future versions may allow specific lines ignored, provide finer control allow use bits checks actually helpful.  can also pass TRUE mean \"error\" FALSE mean \"disabled\". Optional string, single method show. Popular options update, rhs compare_data.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show generated odin code — odin_show","text":"character vector, class odin_code pretty-print method defined.  Returns NULL given model lacks part.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show generated odin code — odin_show","text":"","code":"# Show generated code for the whole system odin_show({   initial(x) <- 1   update(x) <- a   a <- Normal(x, 1) }) #>  #> ── odin code: ────────────────────────────────────────────────────────────────── #> #include <dust2/common.hpp> #> // [[dust2::class(odin_system)]] #> // [[dust2::time_type(discrete)]] #> class odin_system { #> public: #>   odin_system() = delete; #>   using real_type = double; #>   using rng_state_type = monty::random::generator<real_type>; #>   struct shared_state { #>     struct odin_internals_type { #>       struct { #>         dust2::packing state; #>       } packing; #>       struct { #>         std::array<size_t, 1> state; #>       } offset; #>     } odin; #>   }; #>   struct internal_state {}; #>   using data_type = dust2::no_data; #>   static dust2::packing packing_state(const shared_state& shared) { #>     return shared.odin.packing.state; #>   } #>   static shared_state build_shared(cpp11::list parameters) { #>     shared_state::odin_internals_type odin; #>     odin.packing.state = dust2::packing{ #>       {\"x\", {}} #>     }; #>     odin.packing.state.copy_offset(odin.offset.state.begin()); #>     return shared_state{odin}; #>   } #>   static internal_state build_internal(const shared_state& shared) { #>     return internal_state{}; #>   } #>   static void update_shared(cpp11::list parameters, shared_state& shared) { #>   } #>   static void update_internal(const shared_state& shared, internal_state& internal) { #>   } #>   static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) { #>     state[0] = 1; #>   } #>   static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) { #>     const auto x = state[0]; #>     const real_type a = monty::random::normal<real_type>(rng_state, x, 1); #>     state_next[0] = a; #>   } #> };  # Just the update method odin_show({   initial(x) <- 1   update(x) <- a   a <- Normal(x, 1) }, what = \"update\") #>  #> ── odin code (update): ───────────────────────────────────────────────────────── #> static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) { #>   const auto x = state[0]; #>   const real_type a = monty::random::normal<real_type>(rng_state, x, 1); #>   state_next[0] = a; #> }"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate odin code — odin_validate","title":"Validate odin code — odin_validate","text":"Validate odin code.  primarily intended use within applications.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate odin code — odin_validate","text":"","code":"odin_validate(   expr,   input_type = NULL,   compatibility = NULL,   check_bounds = NULL )"},{"path":"https://mrc-ide.github.io/odin2/reference/odin_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate odin code — odin_validate","text":"expr Odin code path file (string), character vector code, expression (typically within braces {}). input_type optional string describing type input expr - must one file, text expression.  given, skips type detection logic odin throw error wrong type input given.  Using may beneficial programmatic environments. compatibility Compatibility mode use.  Valid options \"warning\", updates code can fixed, warnings, \"error\", error.  option \"silent\" silently rewrite code, recommended general use eventually compatibility mode removed (option primarily intended comparing output odin1 odin2 models old code).  default, NULL, currently corresponds warning. check_bounds Control static array bounds checking. enabled default, prone false positives, erroring read write appears bounds actually ok.  argument exists allow disable check compile model anyway.  Future versions may allow specific lines ignored, provide finer control allow use bits checks actually helpful.  can also pass TRUE mean \"error\" FALSE mean \"disabled\".","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate odin code — odin_validate","text":"list elements: success: boolean, TRUE validation successful result: Metadata model; see Details format. error: Either NULL (success TRUE) error; see Details interpreting value. compatibility: data.frame compatibility issues.  formatted similarly src within error (see ), also includes type (code compatibility issue), description (human-readable description issue), original (original expression) value (final expression). intention throw generally function.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_validate.html","id":"result","dir":"Reference","previous_headings":"","what":"Result","title":"Validate odin code — odin_validate","text":"successful validation, return list metadata model.  Currently contains: time: time mode model (string either \"discrete\" \"continuous\") parameters: data.frame describing parameters.  Currently column name. variables: data.frame describing model variables. Currently column name. data: data.frame describing data used model (supports ).  Currently column name.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_validate.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Validate odin code — odin_validate","text":"errors class odin_parse_error.  print context information rethrown.  fields: message: headline error message code: odin error code, listed vignette(\"errors\"), used odin_error_explain src: Source information error.  data.frame columns index (expression number), expr (list column expression), start (starting line; possibly NA), end (finishing line; possibly NA), str (string containing literal value expression; possibly NA) migrated (logical, indicating source automatically migrated odin1 code).  start, end str NA, , rows. can get full rendered message using conditionMessage() error object.","code":""},{"path":"https://mrc-ide.github.io/odin2/reference/odin_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate odin code — odin_validate","text":"","code":"# A successful validation: odin_validate({   initial(x) <- 1   deriv(x) <- a   a <- parameter() }) #> $success #> [1] TRUE #>  #> $error #> NULL #>  #> $result #> $result$time #> [1] \"continuous\" #>  #> $result$variables #>   name #> 1    x #>  #> $result$parameters #>   name #> 1    a #>  #> $result$data #> [1] name #> <0 rows> (or 0-length row.names) #>  #>  #> $compatibility #> NULL #>   # A failure: odin_validate({   initial(x) <- 1   deriv(x) <- a }) #> $success #> [1] FALSE #>  #> $error #> <error/odin_parse_error> #> Error in `odin_validate()`: #> ! Unknown variable used in odin code: 'a' #> → Context: #> deriv(x) <- a #> ℹ For more information, run `odin2::odin_error_explain(\"E2006\")` #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         ├─pkgdown:::unwrap_purrr_error(...) #>   6.         │ └─base::withCallingHandlers(...) #>   7.         └─purrr::map(...) #>   8.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   9.             ├─purrr:::with_indexed_errors(...) #>  10.             │ └─base::withCallingHandlers(...) #>  11.             ├─purrr:::call_with_cleanup(...) #>  12.             └─pkgdown (local) .f(.x[[i]], ...) #>  13.               ├─base::withCallingHandlers(...) #>  14.               └─pkgdown:::data_reference_topic(...) #>  15.                 └─pkgdown:::run_examples(...) #>  16.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  17.                     └─downlit::evaluate_and_highlight(...) #>  18.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  19.                         ├─base::withRestarts(...) #>  20.                         │ └─base (local) withRestartList(expr, restarts) #>  21.                         │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]]) #>  22.                         │   │ └─base (local) doWithOneRestart(return(expr), restart) #>  23.                         │   └─base (local) withRestartList(expr, restarts[-nr]) #>  24.                         │     └─base (local) withOneRestart(expr, restarts[[1L]]) #>  25.                         │       └─base (local) doWithOneRestart(return(expr), restart) #>  26.                         ├─evaluate:::with_handlers(...) #>  27.                         │ ├─base::eval(call) #>  28.                         │ │ └─base::eval(call) #>  29.                         │ └─base::withCallingHandlers(...) #>  30.                         ├─base::withVisible(eval(expr, envir)) #>  31.                         └─base::eval(expr, envir) #>  32.                           └─base::eval(expr, envir) #>  33.                             └─odin2::odin_validate(...) #>  #> $result #> NULL #>  #> $compatibility #> NULL #>   # Migration warnings odin_validate({   initial(x)   deriv(x) <- a   a <- user() }) #> $success #> [1] FALSE #>  #> $error #> <error/odin_parse_error> #> Error in `odin_validate()`: #> ! Unclassifiable expression #> ℹ Expected an assignment (with '<-') or a relationship (with '~') #> → Context: #> initial(x) #> ℹ For more information, run `odin2::odin_error_explain(\"E1001\")` #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         ├─pkgdown:::unwrap_purrr_error(...) #>   6.         │ └─base::withCallingHandlers(...) #>   7.         └─purrr::map(...) #>   8.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   9.             ├─purrr:::with_indexed_errors(...) #>  10.             │ └─base::withCallingHandlers(...) #>  11.             ├─purrr:::call_with_cleanup(...) #>  12.             └─pkgdown (local) .f(.x[[i]], ...) #>  13.               ├─base::withCallingHandlers(...) #>  14.               └─pkgdown:::data_reference_topic(...) #>  15.                 └─pkgdown:::run_examples(...) #>  16.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  17.                     └─downlit::evaluate_and_highlight(...) #>  18.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  19.                         ├─base::withRestarts(...) #>  20.                         │ └─base (local) withRestartList(expr, restarts) #>  21.                         │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]]) #>  22.                         │   │ └─base (local) doWithOneRestart(return(expr), restart) #>  23.                         │   └─base (local) withRestartList(expr, restarts[-nr]) #>  24.                         │     └─base (local) withOneRestart(expr, restarts[[1L]]) #>  25.                         │       └─base (local) doWithOneRestart(return(expr), restart) #>  26.                         ├─evaluate:::with_handlers(...) #>  27.                         │ ├─base::eval(call) #>  28.                         │ │ └─base::eval(call) #>  29.                         │ └─base::withCallingHandlers(...) #>  30.                         ├─base::withVisible(eval(expr, envir)) #>  31.                         └─base::eval(expr, envir) #>  32.                           └─base::eval(expr, envir) #>  33.                             └─odin2::odin_validate(...) #>  #> $result #> NULL #>  #> $compatibility #>   index type                                  description     original #> 1     3 user Replace calls to 'user()' with 'parameter()' <-, a, u.... #>          value start end  str #> 1 <-, a, p....    NA  NA <NA> #>"}]
