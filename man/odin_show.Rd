% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/odin.R
\name{odin_show}
\alias{odin_show}
\title{Show generated odin code}
\usage{
odin_show(
  expr,
  input_type = NULL,
  compatibility = NULL,
  check_bounds = NULL,
  what = NULL
)
}
\arguments{
\item{expr}{Odin code as the path to a file (a string), a
character vector of code, or as an expression (typically within
braces \code{{}}).}

\item{input_type}{An optional string describing the type of input
for \code{expr} - must be one of \code{file}, \code{text} or \code{expression}.  If
given, this skips the type detection logic and odin will throw
an error if the wrong type of input is given.  Using this may be
beneficial in programmatic environments.}

\item{compatibility}{Compatibility mode to use.  Valid options are
"warning", which updates code that can be fixed, with warnings,
and "error", which will error.  The option "silent" will
silently rewrite code, but this is not recommended for general
use as eventually the compatibility mode will be removed (this
option is primarily intended for comparing output of odin1 and
odin2 models against old code).  The default, \code{NULL}, currently
corresponds to \code{warning}.}

\item{check_bounds}{Control over static array bounds checking.
This is enabled by default, but is prone to false positives,
erroring where a read or write appears out of bounds but is
actually ok.  This argument exists to allow you to disable the
check and compile the model anyway.  Future versions may allow
specific lines to be ignored, which will provide finer control
and allow you to use the bits of the checks that are actually
helpful.}

\item{what}{Optional string, being a single method to show.
Popular options are \code{update}, \code{rhs} and \code{compare_data}.}
}
\value{
A character vector, with class \code{odin_code} that has a
pretty-print method defined.  Returns \code{NULL} if \code{what} was given
but the model lacks this part.
}
\description{
Show generated code from compiling an odin model.
}
\examples{
# Show generated code for the whole system
odin_show({
  initial(x) <- 1
  update(x) <- a
  a <- Normal(x, 1)
})

# Just the update method
odin_show({
  initial(x) <- 1
  update(x) <- a
  a <- Normal(x, 1)
}, what = "update")
}
