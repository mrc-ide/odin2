% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package.R
\name{odin_package}
\alias{odin_package}
\title{Update odin code in package}
\usage{
odin_package(path, quiet = FALSE, compatibility = "warning")
}
\arguments{
\item{path}{Path to the package root (the directory that contains
\code{DESCRIPTION}), or any path within that package.}

\item{quiet}{Logical, indicating if compilation messages from
\code{pkgbuild} should be displayed.  Error messages will be
displayed on compilation failure regardless of the value used.
If \code{NULL} is given, then we take the value from \code{DUST_QUIET} if set, or
\code{FALSE} otherwise.}

\item{compatibility}{Compatibility mode to use.  Valid options are
"warning", which updates code that can be fixed, with warnings,
and "error", which will error.  The option "silent" will
silently rewrite code, but this is not recommended for general
use as eventually the compatibility mode will be removed (this
option is primarily intended for comparing output of odin1 and
odin2 models against old code).}
}
\value{
Invisibly, the path to the package.  However, this
function is typically called for its side effect of updating
files in \code{inst/dust} and \code{src} within this package after you
have changed the odin code in \code{inst/odin}.
}
\description{
Update generated code in a package that uses odin and dust to
provide a model. This will generate new dust code in \code{inst/dust}
and from that generate a full model in \code{src}, and an R interface
in \code{R/dust.R}, along with the cpp11 attributes that are needed to
use the model.
}
\details{
This function is powered by \link[dust2:dust_package]{dust2::dust_package}, and the same
pre-requisites apply here:

For your \code{DESCRIPTION} file:
\itemize{
\item \code{dust2} must be in \code{Imports}
\item \code{cpp11}, \code{dust2} and \code{monty} must be in \code{LinkingTo}
}

For your \code{NAMESPACE} file:
\itemize{
\item you must have a suitable \code{useDynLib()} call with \code{.registration = TRUE}
}

If you do not satisfy these requirements, \code{dust2::dust_package}
will fail with a message indicating actions you should take.  Once
set up, generally things will keep working.

If you want your packages to build on GitHub actions, or be
installable via \code{remotes::install_github} you should add to your
\code{DESCRIPTION}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{Remotes: mrc-ide/dust2, mrc-ide/monty
}\if{html}{\out{</div>}}

Note that you do not need to include odin2 itself as a dependency.
}
